# src/ui/app_interface.py
# L·ªõp ƒë·ªãnh nghƒ©a v√† qu·∫£n l√Ω to√†n b·ªô giao di·ªán Gradio.

import gradio as gr
import logging
import re
from pathlib import Path
import json
from typing import List, Tuple, Optional

# Import c√°c th√†nh ph·∫ßn ƒë√£ ƒë∆∞·ª£c refactor
from config.settings import AppConfig
from src.core.llm_provider import LLMProvider
from src.core.vector_store import VectorStore
from src.core.professional_pdf_processor import ProfessionalPDFProcessor
from src.agents.context_aware_quiz_agent import ContextAwareQuizAgent
from src.agents.summarization_agent_optimized import SummarizationAgentOptimized
from src.db.database_manager import DatabaseManager
from src.services.document_service import DocumentService
from src.services.analysis_service import AnalysisService
from src.services.quiz_service import QuizService
from src.agents.analysis_agent import AnalysisAgent
from src.agents.card_manager import CardManager

logger = logging.getLogger(__name__)

class A2ASchoolApp:
    """
    L·ªõp ch√≠nh c·ªßa ·ª©ng d·ª•ng, kh·ªüi t·∫°o t·∫•t c·∫£ c√°c th√†nh ph·∫ßn v√†
    x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng b·∫±ng Gradio.
    """
    def __init__(self, config: AppConfig):
        logger.info("--- B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·ªët l√µi ---")
        self.config = config
        
        # --- Kh·ªüi t·∫°o theo nguy√™n t·∫Øc Dependency Injection ---
        # 1. Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·∫•p th·∫•p (kh√¥ng ph·ª• thu·ªôc v√†o ai)
        self.db_manager = DatabaseManager(config.DB_PATH)
        self.llm_provider = LLMProvider(config.OPENROUTER_API_KEY, config.API_URL, config.DEFAULT_MODEL, config.DATA_DIR)
        self.vector_store = VectorStore(config.EMBEDDING_MODEL)
        
        # 2. Kh·ªüi t·∫°o c√°c Agents t·ªëi ∆∞u
        self.analysis_agent = AnalysisAgent()
        # Kh·ªüi t·∫°o Professional processors (thay th·∫ø c√°c agent ri√™ng l·∫ª)
        self.summarization_agent = SummarizationAgentOptimized(self.llm_provider)
        self.quiz_agent = ContextAwareQuizAgent(self.llm_provider)
        self.pdf_processor = ProfessionalPDFProcessor(self.llm_provider)
        self.card_manager = CardManager(config.AGENT_CARDS_DIR, self.llm_provider)

        # 3. Kh·ªüi t·∫°o c√°c Services (ph·ª• thu·ªôc v√†o c√°c th√†nh ph·∫ßn tr√™n)
        self.document_service = DocumentService(config, self.db_manager, self.vector_store, self.pdf_processor)
        self.analysis_service = AnalysisService(self.analysis_agent)
        self.quiz_service = QuizService(config, self.db_manager, self.vector_store, self.quiz_agent)
        
        # --- Tr·∫°ng th√°i c·ªßa ·ª©ng d·ª•ng ---
        self.active_document_id = None # L∆∞u ID c·ªßa t√†i li·ªáu ƒëang ƒë∆∞·ª£c ch·ªçn
        logger.info("--- ‚úÖ T·∫•t c·∫£ c√°c th√†nh ph·∫ßn ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng ---")

    # --- C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán cho Tab "H·ªèi ƒë√°p PDF" ---

    def _handle_pdf_upload(self, files: List[gr.File]) -> gr.Dropdown:
        """X·ª≠ l√Ω s·ª± ki·ªán upload file PDF v·ªõi loading state."""
        if not files:
            return gr.Dropdown(choices=[], value=None)
        
        logger.info(f"Nh·∫≠n ƒë∆∞·ª£c {len(files)} file ƒë·ªÉ x·ª≠ l√Ω.")
        try:
            for file in files:
                file_path = Path(file.name)
                logger.info(f"ƒêang x·ª≠ l√Ω file: {file_path.name}")
                self.document_service.process_document(file_path)
                logger.info(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω file: {file_path.name}")
            
            # T·∫£i l·∫°i danh s√°ch t√†i li·ªáu
            return self._update_document_dropdown()
            
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω file PDF: {e}")
            return gr.Dropdown(choices=[], value=None)

    def _update_document_dropdown(self) -> gr.Dropdown:
        """C·∫≠p nh·∫≠t danh s√°ch t√†i li·ªáu trong dropdown."""
        docs = self.document_service.get_all_documents()
        choices = [(f"{doc['filename']} ({doc['status']})", doc['id']) for doc in docs]
        return gr.Dropdown(choices=choices, label="Ch·ªçn t√†i li·ªáu ƒë√£ x·ª≠ l√Ω", interactive=True)

    def _handle_doc_selection(self, doc_id: str) -> Tuple[gr.Dropdown, gr.Dropdown]:
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt t√†i li·ªáu t·ª´ dropdown."""
        self.active_document_id = doc_id
        if not doc_id:
            empty_dropdown = gr.Dropdown(choices=[], value=None)
            return empty_dropdown, empty_dropdown
        
        doc = self.document_service.get_document(doc_id)
        if not doc:
            empty_dropdown = gr.Dropdown(choices=[], value=None)
            return empty_dropdown, empty_dropdown
        
        # C·∫≠p nh·∫≠t dropdown ch∆∞∆°ng
        chapters = doc.get('chapters', [])
        if chapters is None:
            chapters = []
        chapter_choices = ["To√†n b·ªô t√†i li·ªáu"] + [f"{ch.get('number', 'N/A')}. {ch.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}" for ch in chapters]
        
        chapter_dropdown = gr.Dropdown(choices=chapter_choices, value="To√†n b·ªô t√†i li·ªáu", interactive=True)
        quiz_dropdown = gr.Dropdown(choices=chapter_choices, value="To√†n b·ªô t√†i li·ªáu", interactive=True)
        
        return chapter_dropdown, quiz_dropdown

    def _handle_chat(self, message: str, history: List, chapter_scope: str):
        """X·ª≠ l√Ω tin nh·∫Øn chat t·ª´ ng∆∞·ªùi d√πng."""
        if not self.active_document_id:
            history.append([message, "L·ªói: Vui l√≤ng ch·ªçn m·ªôt t√†i li·ªáu tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu chat."])
            return history
        
        # --- Logic Agentic: Nh·∫≠n bi·∫øt √Ω ƒë·ªãnh t√≥m t·∫Øt ---
        if "t√≥m t·∫Øt" in message.lower() or "summarize" in message.lower():
            history.append([message, "ƒê√£ nh·∫≠n di·ªán y√™u c·∫ßu t√≥m t·∫Øt. ƒêang g·ªçi Summarization Agent..."])
            
            chapter_filter = None
            if chapter_scope != "To√†n b·ªô t√†i li·ªáu":
                 # Tr√≠ch xu·∫•t ti√™u ƒë·ªÅ ch∆∞∆°ng ƒë·ªÉ l·ªçc
                match = re.search(r'\d+\.\s*(.*)', chapter_scope)
                if match:
                    chapter_filter = match.group(1).strip()

            context_to_summarize = self.document_service.get_context_for_query(
                doc_id=self.active_document_id,
                query=message, # Query v·∫´n c√≥ th·ªÉ ch·ª©a th√¥ng tin v·ªÅ n·ªôi dung c·∫ßn t√≥m t·∫Øt
                chapter_filter=chapter_filter
            )
            
            summary = self.document_processor.summarizer.summarize(context_to_summarize)
            history[-1][1] = summary or "Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt."
            return history

        # N·∫øu kh√¥ng ph·∫£i t√≥m t·∫Øt, ti·∫øn h√†nh RAG
        chapter_filter = None
        if chapter_scope != "To√†n b·ªô t√†i li·ªáu":
            match = re.search(r'\d+\.\s*(.*)', chapter_scope)
            if match:
                chapter_filter = match.group(1).strip()
                
        context = self.document_service.get_context_for_query(self.active_document_id, message, chapter_filter)

        system_prompt = "You are a helpful AI assistant. Answer the user's question based ONLY on the provided context."
        user_prompt = f"CONTEXT:\n---\n{context}\n---\n\nQUESTION: {message}"
        
        response = self.llm_provider.generate(system_prompt, user_prompt)
        history.append([message, response])
        return history

    # --- C√°c h√†m x·ª≠ l√Ω cho Tab "T·∫°o C√¢u h·ªèi" ---
    
    def _handle_quiz_generation(self, num_q: int, difficulty: str, scope: str) -> str:
        if not self.active_document_id:
            return "L·ªói: Vui l√≤ng ch·ªçn m·ªôt t√†i li·ªáu ·ªü tab 'H·ªèi ƒë√°p PDF' tr∆∞·ªõc."
        
        try:
            logger.info(f"üéØ B·∫Øt ƒë·∫ßu t·∫°o quiz: {num_q} c√¢u h·ªèi, ƒë·ªô kh√≥ {difficulty}, ph·∫°m vi {scope}")
            
            if scope == "To√†n b·ªô t√†i li·ªáu":
                # Generate quiz for entire document
                logger.info("üìÑ T·∫°o quiz cho to√†n b·ªô t√†i li·ªáu...")
                
                # Get document content
                doc = self.document_service.get_document(self.active_document_id)
                if not doc:
                    return "L·ªói: Kh√¥ng t√¨m th·∫•y t√†i li·ªáu."
                
                # Get all chunks for the document
                all_chunks = self.vector_store.get_chunks_for_document(self.active_document_id)
                if not all_chunks:
                    return "L·ªói: Kh√¥ng t√¨m th·∫•y n·ªôi dung t√†i li·ªáu."
                
                # Concatenate all content
                full_content = "\n\n".join([chunk.content for chunk in all_chunks])
                
                # Generate quiz using the old method
                result = self.quiz_service.generate_quiz(
                    document_text=full_content,
                    num_questions=int(num_q),
                    difficulty=difficulty,
                    scope=scope
                )
            else:
                # Generate quiz for specific chapter
                logger.info(f"üìö T·∫°o quiz cho ch∆∞∆°ng: {scope}")
                
                match = re.search(r'\d+\.\s*(.*)', scope)
                if match:
                    chapter_title = match.group(1).strip()
                    result = self.quiz_service.generate_quiz_for_chapter(
                        doc_id=self.active_document_id,
                        chapter_title=chapter_title,
                        num_questions=int(num_q),
                        difficulty=difficulty,
                        document_service=self.document_service
                    )
                else:
                    return "L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh t√™n ch∆∞∆°ng."
            
            logger.info("‚úÖ Ho√†n th√†nh t·∫°o quiz")
            return result if result else "Kh√¥ng th·ªÉ t·∫°o quiz. Vui l√≤ng th·ª≠ l·∫°i."
            
        except Exception as e:
            logger.error(f"L·ªói khi t·∫°o quiz: {e}", exc_info=True)
            return f"L·ªói khi t·∫°o quiz: {str(e)}"
        
    # --- C√°c h√†m x·ª≠ l√Ω cho Tab "Ph√¢n t√≠ch CSV" ---
    
    def _handle_csv_analysis(self, file: gr.File) -> Tuple[gr.Textbox, gr.Plot, gr.Plot]:
        if not file:
            return "Vui l√≤ng t·∫£i l√™n m·ªôt file CSV.", None, None
        
        results = self.analysis_service.analyze_csv(file.name)
        if "error" in results:
            return results["error"], None, None
            
        # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ th·ªëng k√™ ƒë·ªÉ hi·ªÉn th·ªã
        stats_str = json.dumps(results.get("basic_stats", {}), indent=2, ensure_ascii=False)
        
        # Get Plotly chart JSON data
        visualizations = results.get("visualizations", {})
        dist_plot = visualizations.get("distribution")
        corr_plot = visualizations.get("correlation")
        
        return stats_str, dist_plot, corr_plot

    # --- C√°c h√†m x·ª≠ l√Ω cho Tab "Quiz History" ---
    
    def _load_quiz_history(self) -> Tuple[gr.Dropdown, str]:
        """Load quiz history and update dropdown."""
        try:
            quizzes = self.quiz_service.get_quiz_history()
            if not quizzes:
                return gr.Dropdown(choices=[], value=None), "Ch∆∞a c√≥ quiz n√†o ƒë∆∞·ª£c t·∫°o."
            
            # Create choices for dropdown
            choices = []
            for quiz in quizzes:
                title = f"{quiz.get('filename', 'Unknown')} - {quiz.get('scope', 'Unknown')} ({quiz.get('created_at', 'Unknown date')})"
                choices.append((title, quiz['id']))
            
            return gr.Dropdown(choices=choices, value=None), "ƒê√£ t·∫£i danh s√°ch quiz."
            
        except Exception as e:
            logger.error(f"Error loading quiz history: {e}")
            return gr.Dropdown(choices=[], value=None), f"L·ªói khi t·∫£i l·ªãch s·ª≠ quiz: {str(e)}"

    def _handle_quiz_selection(self, quiz_id: str) -> str:
        """Handle quiz selection and display content."""
        if not quiz_id:
            return "Vui l√≤ng ch·ªçn m·ªôt quiz ƒë·ªÉ xem."
        
        try:
            quizzes = self.quiz_service.get_quiz_history()
            selected_quiz = next((q for q in quizzes if q['id'] == quiz_id), None)
            
            if not selected_quiz:
                return "Kh√¥ng t√¨m th·∫•y quiz ƒë∆∞·ª£c ch·ªçn."
            
            return selected_quiz.get('quiz_content', 'N·ªôi dung quiz kh√¥ng c√≥ s·∫µn.')
            
        except Exception as e:
            logger.error(f"Error displaying quiz: {e}")
            return f"L·ªói khi hi·ªÉn th·ªã quiz: {str(e)}"

    # --- X√¢y d·ª±ng giao di·ªán ---
    
    def launch(self):
        """X√¢y d·ª±ng v√† kh·ªüi ch·∫°y giao di·ªán Gradio."""
        with gr.Blocks(theme=gr.themes.Soft(), title="A2A School Platform") as interface:
            gr.Markdown("# üéì A2A School - N·ªÅn t·∫£ng AI Gi√°o d·ª•c Th√¥ng minh")
            
            with gr.Tabs():
                # --- TAB 1: H·ªéI ƒê√ÅP PDF ---
                with gr.Tab("üìÑ H·ªèi ƒë√°p & T√≥m t·∫Øt PDF"):
                    with gr.Row():
                        with gr.Column(scale=1):
                            pdf_upload_btn = gr.Files(label="1. T·∫£i l√™n file PDF", file_types=[".pdf"])
                            doc_dropdown = gr.Dropdown(label="2. Ch·ªçn t√†i li·ªáu ƒë√£ x·ª≠ l√Ω", interactive=False)
                            chapter_dropdown = gr.Dropdown(label="3. Ch·ªçn ph·∫°m vi (Ch∆∞∆°ng)", interactive=False)
                        with gr.Column(scale=2):
                            chatbot = gr.Chatbot(label="H·ªèi ƒë√°p v·ªõi AI", height=500, bubble_full_width=True)
                            msg_box = gr.Textbox(label="Nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu t√≥m t·∫Øt...", show_label=False, placeholder="V√≠ d·ª•: Python l√† g√¨? ho·∫∑c t√≥m t·∫Øt n·ªôi dung ch√≠nh")
                            msg_box.submit(self._handle_chat, [msg_box, chatbot, chapter_dropdown], chatbot)

                # --- TAB 2: T·∫†O C√ÇU H·ªéI ---
                with gr.Tab("üìù T·∫°o b·ªô ƒë·ªÅ ki·ªÉm tra"):
                    gr.Markdown("S·ª≠ d·ª•ng t√†i li·ªáu ƒë√£ ch·ªçn ·ªü tab 'H·ªèi ƒë√°p PDF' ƒë·ªÉ t·∫°o c√¢u h·ªèi.")
                    with gr.Row():
                        with gr.Column():
                            quiz_num_questions = gr.Slider(1, 20, value=5, step=1, label="S·ªë l∆∞·ª£ng c√¢u h·ªèi")
                            quiz_difficulty = gr.Radio(["easy", "medium", "hard"], label="ƒê·ªô kh√≥", value="medium")
                            # Dropdown cho ph·∫°m vi s·∫Ω ƒë∆∞·ª£c copy t·ª´ tab chat
                            quiz_scope_dropdown = gr.Dropdown(label="Ph·∫°m vi (Ch∆∞∆°ng)", choices=["To√†n b·ªô t√†i li·ªáu"], value="To√†n b·ªô t√†i li·ªáu", interactive=True)
                            quiz_generate_btn = gr.Button("üöÄ T·∫°o b·ªô ƒë·ªÅ", variant="primary")
                        with gr.Column(scale=2):
                            quiz_output_box = gr.Markdown(label="K·∫øt qu·∫£ b·ªô ƒë·ªÅ")
                
                # --- TAB 3: PH√ÇN T√çCH CSV ---
                with gr.Tab("üìä Ph√¢n t√≠ch CSV"):
                    with gr.Row():
                        with gr.Column(scale=1):
                            csv_upload = gr.File(label="T·∫£i l√™n file CSV", file_types=[".csv"])
                            csv_analyze_btn = gr.Button("üîç Ph√¢n t√≠ch ngay", variant="primary")
                        with gr.Column(scale=2):
                            gr.Markdown("### K·∫øt qu·∫£ Ph√¢n t√≠ch")
                            csv_stats_output = gr.Textbox(label="Th·ªëng k√™ c∆° b·∫£n", lines=10, interactive=False)
                            gr.Markdown("### Bi·ªÉu ƒë·ªì tr·ª±c quan t∆∞∆°ng t√°c")
                            csv_dist_plot = gr.Plot(label="Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi")
                            csv_corr_plot = gr.Plot(label="Bi·ªÉu ƒë·ªì t∆∞∆°ng quan")

                # --- TAB 4: QUIZ HISTORY ---
                with gr.Tab("üìö L·ªãch s·ª≠ Quiz"):
                    with gr.Row():
                        with gr.Column(scale=1):
                            gr.Markdown("### Ch·ªçn Quiz ƒë·ªÉ xem")
                            quiz_history_dropdown = gr.Dropdown(
                                label="Danh s√°ch Quiz", 
                                choices=[], 
                                value=None,
                                interactive=True
                            )
                            quiz_refresh_btn = gr.Button("üîÑ L√†m m·ªõi danh s√°ch", variant="secondary")
                            quiz_status = gr.Textbox(label="Tr·∫°ng th√°i", value="Ch∆∞a t·∫£i", interactive=False)
                        with gr.Column(scale=2):
                            gr.Markdown("### N·ªôi dung Quiz")
                            quiz_content_display = gr.Markdown(
                                label="N·ªôi dung Quiz", 
                                value="Vui l√≤ng ch·ªçn m·ªôt quiz ƒë·ªÉ xem n·ªôi dung.",
                                show_label=False
                            )

                # --- TAB 5: AGENT CARDS (DEMO) ---
                with gr.Tab("ü§ñ Agent Cards"):
                    gr.Markdown("Th·ª±c thi c√°c t√°c v·ª• chuy√™n bi·ªát b·∫±ng AI Agent Cards (Demo).")
                    # ... Giao di·ªán cho Agent Cards c√≥ th·ªÉ ƒë∆∞·ª£c th√™m ·ªü ƒë√¢y ...


            # Logic k·∫øt n·ªëi c√°c th√†nh ph·∫ßn giao di·ªán
            pdf_upload_btn.upload(self._handle_pdf_upload, pdf_upload_btn, doc_dropdown)
            doc_dropdown.change(self._handle_doc_selection, doc_dropdown, [chapter_dropdown, quiz_scope_dropdown])
            
            # Quiz generation with loading state
            quiz_generate_btn.click(
                self._handle_quiz_generation,
                [quiz_num_questions, quiz_difficulty, quiz_scope_dropdown],
                quiz_output_box
            )
            
            # CSV analysis
            csv_analyze_btn.click(
                self._handle_csv_analysis,
                csv_upload,
                [csv_stats_output, csv_dist_plot, csv_corr_plot]
            )
            
            # Quiz History handlers
            quiz_refresh_btn.click(
                self._load_quiz_history,
                outputs=[quiz_history_dropdown, quiz_status]
            )
            
            quiz_history_dropdown.change(
                self._handle_quiz_selection,
                quiz_history_dropdown,
                quiz_content_display
            )
            
        interface.launch(
            server_name=self.config.GRADIO_SERVER_NAME,
            server_port=self.config.GRADIO_SERVER_PORT,
            share=self.config.GRADIO_SHARE,
            debug=True
        )


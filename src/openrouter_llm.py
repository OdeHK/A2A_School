import os
import requests
import json

class OpenRouterLLM:
    """
    L·ªõp v·ªè b·ªçc (wrapper) ƒë·ªÉ g·ªçi model qua OpenRouter API.
    """
    def __init__(self, model_name: str, api_key: str):
        self.model = model_name
        self.api_key = api_key
        self.api_url = "https://api.openrouter.ai/api/v1/chat/completions"
        
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/OdeHK/A2A_School",  # GitHub repo URL
            "X-Title": "A2A School Project"  # T√™n ·ª©ng d·ª•ng
        }
        # --- K·∫æT TH√öC PH·∫¶N S·ª¨A L·ªñI ---

    def check_internet_connection(self):
        """
        Ki·ªÉm tra k·∫øt n·ªëi internet b·∫±ng c√°ch ping google.com
        """
        try:
            requests.get("https://www.google.com", timeout=5)
            return True
        except:
            return False

    def invoke(self, prompt: str, max_retries=3, **kwargs) -> str:
        """
        G·ª≠i prompt ƒë·∫øn OpenRouter v·ªõi c∆° ch·∫ø retry.
        """
        import time
        from requests.exceptions import RequestException, HTTPError, ConnectionError
        
        # Ki·ªÉm tra k·∫øt n·ªëi internet
        if not self.check_internet_connection():
            raise ConnectionError("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi internet. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.")

        payload = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": kwargs.get("temperature", 0.7),
            "max_tokens": kwargs.get("max_tokens", 1024)
        }

        for attempt in range(max_retries):
            try:
                response = requests.post(
                    self.api_url,
                    headers=self.headers,
                    json=payload,
                    timeout=60  # TƒÉng timeout l√™n 60 gi√¢y
                )
                
                if response.status_code == 503:
                    wait_time = min((attempt + 1) * 5, 20)  # 5, 10, 15, 20 gi√¢y, t·ªëi ƒëa 20 gi√¢y
                    print(f"üîÑ API kh√¥ng kh·∫£ d·ª•ng. Th·ª≠ l·∫°i sau {wait_time} gi√¢y...")
                elif response.status_code == 401:
                    raise ValueError("‚ùå API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                    time.sleep(wait_time)
                    continue
                    
                response.raise_for_status()
                
                result = response.json()
                if "choices" in result and len(result["choices"]) > 0:
                    return result["choices"][0]["message"]["content"]
                
                print(f"‚ö†Ô∏è ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng mong ƒë·ª£i: {json.dumps(result, indent=2)}")
                return "Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ trong vi·ªác x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau."

            except RequestException as e:
                error_detail = e.response.text if hasattr(e, 'response') and e.response else str(e)
                print(f"‚ùå L·ªói khi g·ªçi OpenRouter API (l·∫ßn {attempt + 1}/{max_retries}): {error_detail}")
                
                if attempt == max_retries - 1:  # N·∫øu l√† l·∫ßn th·ª≠ cu·ªëi c√πng
                    if isinstance(e, HTTPError) and e.response.status_code == 503:
                        return "Xin l·ªói, d·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t."
                    return "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i."
                    
                wait_time = (attempt + 1) * 2
                time.sleep(wait_time)  # ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i
                
        return "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi d·ªãch v·ª• sau nhi·ªÅu l·∫ßn th·ª≠. Vui l√≤ng th·ª≠ l·∫°i sau."
[
  {
    "path": "Python rat la co ban - Vo Duy Tuan.pdf",
    "table_of_contents": [
      {
        "title": "Giới thiệu",
        "page": 3,
        "children": [
          {
            "title": "Mục lục",
            "page": 4,
            "children": [],
            "content": "Nội dung phần 'Mục lục':\n\nkhi biết các kiến thức này trong việc áp dụng Python vào\ncông việc trong tương lai 1 Hello world\n2 Cú pháp\n3 Phân chia module\n4 Class\n5 Thao tác trên tập tin\n6 Xử lý hình ảnh\n7 Xử lý file JSON\n8 Xử lý file XML\n9 Kết nối MySQL\n10 Kết nối Redis\n11 Kết nối Memcached\n12 Kết nối RabbitMQ\n13 Restful Client\n14 Gởi email với SMTP\n15 Socket Programming"
          },
          {
            "title": "Tác giả",
            "page": 5,
            "children": [],
            "content": "Tác giả\nTên: Võ Duy Tuấn\nEmail: tuanmaster2012@gmail.com\nFacebook: https://www.facebook.com/voduytuan"
          }
        ],
        "content": "Nội dung phần 'Giới thiệu':\n\nNội dung phần 'Mục lục':\n\nkhi biết các kiến thức này trong việc áp dụng Python vào\ncông việc trong tương lai 1 Hello world\n2 Cú pháp\n3 Phân chia module\n4 Class\n5 Thao tác trên tập tin\n6 Xử lý hình ảnh\n7 Xử lý file JSON\n8 Xử lý file XML\n9 Kết nối MySQL\n10 Kết nối Redis\n11 Kết nối Memcached\n12 Kết nối RabbitMQ\n13 Restful Client\n14 Gởi email với SMTP\n15 Socket Programming Tác giả\nTên: Võ Duy Tuấn\nEmail: tuanmaster2012@gmail.com\nFacebook: https://www.facebook.com/voduytuan"
      },
      {
        "title": "Chương 1. Hello world",
        "page": 6,
        "children": [
          {
            "title": "Cài đặt",
            "page": 6,
            "children": [],
            "content": "Nội dung phần 'Cài đặt':\n\nChương 1 Hello world\nPython là một ngôn ngữ phiên dịch (Interpreter Language),\ntức là không cần build thành file thực thi mà chạy trực tiếp\nnhư PHP Hiện tại Python có 2 nhánh chính là 2.x và 3.x Ở nhánh 2.x\nđã dừng phát triển và đang đứng ở phiên bản 2.7 Nhánh\nPython 3.x thì vẫn đang được tiếp tục phát triển Website chính thức của Python: www.python.org\nCài đặt\nPython hỗ trợ hầu hết các nền tảng và rất dễ tìm thấy sẵn\ntrên một số hệ điều hành như Mac OS…\nĐể biết là hệ thống của bạn đã cài Python chưa, có thể vào\nmàn hình command line và gõ:\n$ python --version"
          },
          {
            "title": "Công cụ phát triển",
            "page": 7,
            "children": [],
            "content": "Nội dung phần 'Công cụ phát triển':\n\nNếu đã cài đặt python thì sẽ hiển thị thông tin phiên bản\npython Nếu báo lỗi thì đồng nghĩa với bạn chưa cài đặt\nPython Có thể tham khảo cách cài đặt Python tại:\nhttps://www.python.org/downloads/\nCông cụ phát triển\nChỉ cần dùng một text editor là bạn có thể viết được code\npython hoặc có thể dùng các công cụ cao cấp hơn (IDE)\nnhư Aptana, PyCharm…Các IDE thường hỗ trợ thêm quá\ntrình phân tích cú pháp dòng lệnh, debug…trong phạm vi\ncuốn sách nhỏ này thì mình hướng đến cách thực thi\npython bằng dòng lệnh Hello world\nTạo một file có tên là helloworld.py  và có nội dung như\nsau:\nprint 'Hello world'"
          },
          {
            "title": "Hello world",
            "page": 7,
            "children": [],
            "content": "Nội dung phần 'Hello world':\n\nNếu đã cài đặt python thì sẽ hiển thị thông tin phiên bản\npython Nếu báo lỗi thì đồng nghĩa với bạn chưa cài đặt\nPython Có thể tham khảo cách cài đặt Python tại:\nhttps://www.python.org/downloads/\nCông cụ phát triển\nChỉ cần dùng một text editor là bạn có thể viết được code\npython hoặc có thể dùng các công cụ cao cấp hơn (IDE)\nnhư Aptana, PyCharm…Các IDE thường hỗ trợ thêm quá\ntrình phân tích cú pháp dòng lệnh, debug…trong phạm vi\ncuốn sách nhỏ này thì mình hướng đến cách thực thi\npython bằng dòng lệnh Hello world\nTạo một file có tên là helloworld.py  và có nội dung như\nsau:\nprint 'Hello world'\nprint  là lệnh cơ bản nhất để xuất một biến ra (thường là\nmàn hình)\nSau đó, vào màn hình command line, di chuyển đến thư\nmục chứa file này và gõ $ python helloworld.py\nNếu thấy xuất hiện dòng chữ Hello world  tức là bạn đã\nhoàn thành việc viết ứng dụng python đầu tiên"
          }
        ],
        "content": "Nội dung phần 'Chương 1. Hello world':\n\nNội dung phần 'Cài đặt':\n\nChương 1 Hello world\nPython là một ngôn ngữ phiên dịch (Interpreter Language),\ntức là không cần build thành file thực thi mà chạy trực tiếp\nnhư PHP Hiện tại Python có 2 nhánh chính là 2.x và 3.x Ở nhánh 2.x\nđã dừng phát triển và đang đứng ở phiên bản 2.7 Nhánh\nPython 3.x thì vẫn đang được tiếp tục phát triển Website chính thức của Python: www.python.org\nCài đặt\nPython hỗ trợ hầu hết các nền tảng và rất dễ tìm thấy sẵn\ntrên một số hệ điều hành như Mac OS…\nĐể biết là hệ thống của bạn đã cài Python chưa, có thể vào\nmàn hình command line và gõ:\n$ python --version Nội dung phần 'Công cụ phát triển':\n\nNếu đã cài đặt python thì sẽ hiển thị thông tin phiên bản\npython Nếu báo lỗi thì đồng nghĩa với bạn chưa cài đặt\nPython Có thể tham khảo cách cài đặt Python tại:\nhttps://www.python.org/downloads/\nCông cụ phát triển\nChỉ cần dùng một text editor là bạn có thể viết được code\npython hoặc có thể dùng các công cụ cao cấp hơn (IDE)\nnhư Aptana, PyCharm…Các IDE thường hỗ trợ thêm quá\ntrình phân tích cú pháp dòng lệnh, debug…trong phạm vi\ncuốn sách nhỏ này thì mình hướng đến cách thực thi\npython bằng dòng lệnh Hello world\nTạo một file có tên là helloworld.py  và có nội dung như\nsau:\nprint 'Hello world' Nội dung phần 'Hello world':\n\nNếu đã cài đặt python thì sẽ hiển thị thông tin phiên bản\npython Nếu báo lỗi thì đồng nghĩa với bạn chưa cài đặt\nPython Có thể tham khảo cách cài đặt Python tại:\nhttps://www.python.org/downloads/\nCông cụ phát triển\nChỉ cần dùng một text editor là bạn có thể viết được code\npython hoặc có thể dùng các công cụ cao cấp hơn (IDE)\nnhư Aptana, PyCharm…Các IDE thường hỗ trợ thêm quá\ntrình phân tích cú pháp dòng lệnh, debug…trong phạm vi\ncuốn sách nhỏ này thì mình hướng đến cách thực thi\npython bằng dòng lệnh Hello world\nTạo một file có tên là helloworld.py  và có nội dung như\nsau:\nprint 'Hello world'\nprint  là lệnh cơ bản nhất để xuất một biến ra (thường là\nmàn hình)\nSau đó, vào màn hình command line, di chuyển đến thư\nmục chứa file này và gõ $ python helloworld.py\nNếu thấy xuất hiện dòng chữ Hello world  tức là bạn đã\nhoàn thành việc viết ứng dụng python đầu tiên"
      },
      {
        "title": "Chương 2. Cú pháp",
        "page": 9,
        "children": [
          {
            "title": "2.1. Biến số",
            "page": 9,
            "children": [],
            "content": "Nội dung phần '2.1. Biến số':\n\nChương 2 Cú pháp\n2.1 Biến số\nKhai báo biến bằng một câu lệnh gán a = 1\nbạn có thể gán nhiều loại giá trị (số, chuỗi) cho một biến a = 1\na = 'Hello World'\na = [1, 2, 3]\na = [1.2, 'Hello', 'W', 2]  \n2.2 Toán tử số học\nPython cũng hỗ trợ một số toán tử toán học thông dụng\nnhư:\n+  phép cộng"
          },
          {
            "title": "2.2. Toán tử số học",
            "page": 9,
            "children": [],
            "content": "Nội dung phần '2.2. Toán tử số học':\n\nChương 2 Cú pháp\n2.1 Biến số\nKhai báo biến bằng một câu lệnh gán a = 1\nbạn có thể gán nhiều loại giá trị (số, chuỗi) cho một biến a = 1\na = 'Hello World'\na = [1, 2, 3]\na = [1.2, 'Hello', 'W', 2]  \n2.2 Toán tử số học\nPython cũng hỗ trợ một số toán tử toán học thông dụng\nnhư:\n+  phép cộng"
          },
          {
            "title": "2.3. Boolean và Toán tử logic",
            "page": 10,
            "children": [],
            "content": "Nội dung phần '2.3. Boolean và Toán tử logic':\n\n-  phép trừ\n*  phép nhân\n/  phép chia\n%  phép chia lấy dư (modulo)\n2.3 Boolean và Toán tử logic\nGiá trị đúng và sai tương ứng là True  và False not  để đảo giá trị and  phép tính logic và (AND)\nor  phép tính logic hoặc (OR)\nMột số phép so sánh thông thường như <  (bé hơn), <=  (bé\nhơn hoặc bằng), >  (lớn hơn), >=  (lớn hơn hoặc bằng), ==\n(bằng), !=  (khác) để so sánh 2 giá trị Hỗ trợ dạng so sánh kép như:"
          },
          {
            "title": "2.4. Cấu trúc điều khiển",
            "page": 11,
            "children": [
              {
                "title": "2.4.2. Switch…case",
                "page": 12,
                "children": [],
                "content": "Nội dung phần '2.4.2. Switch…case':\n\nif condition1 :\n    indentedStatementBlockForTrueCondition1\nelif condition2 :\n    indentedStatementBlockForFirstTrueCondition2\nelif condition3 :\n    indentedStatementBlockForFirstTrueCondition3\nelif condition4 :\n    indentedStatementBlockForFirstTrueCondition4\nelse:\n    indentedStatementBlockForEachConditionFalse\n2.4.2 Switch…case\nPython không có cấu trúc switch … case\n2.4.3 For…in\nfor iterating_var in sequence:\n    statements(s)\nVí dụ:"
              },
              {
                "title": "2.4.3. For…in",
                "page": 12,
                "children": [],
                "content": "Nội dung phần '2.4.3. For…in':\n\nif condition1 :\n    indentedStatementBlockForTrueCondition1\nelif condition2 :\n    indentedStatementBlockForFirstTrueCondition2\nelif condition3 :\n    indentedStatementBlockForFirstTrueCondition3\nelif condition4 :\n    indentedStatementBlockForFirstTrueCondition4\nelse:\n    indentedStatementBlockForEachConditionFalse\n2.4.2 Switch…case\nPython không có cấu trúc switch … case\n2.4.3 For…in\nfor iterating_var in sequence:\n    statements(s)\nVí dụ:\nfor letter in 'Python':     # First Example\n    print 'Current Letter :', letter\nfruits = ['banana', 'apple',  'mango']\nfor fruit in fruits:        # Second Example\n    print 'Current fruit :', fruit\nprint \"Good bye!\"\nKết quả hiển thị của ví dụ trên:\nCurrent Letter : P\nCurrent Letter : y\nCurrent Letter : t\nCurrent Letter : h\nCurrent Letter : o\nCurrent Letter : n\nCurrent fruit : banana\nCurrent fruit : apple\nCurrent fruit : mango\nGood bye 2.4.4 While"
              },
              {
                "title": "2.4.4. While",
                "page": 14,
                "children": [],
                "content": "Nội dung phần '2.4.4. While':\n\nwhile expression:\n    statement(s)\nVí dụ:\ncount = 0\nwhile (count < 9):\n   print 'The count is:', count\n   count = count + 1\n    \nprint \"Good bye!\"\nKết quả hiển thị của ví dụ trên:"
              }
            ],
            "content": "Nội dung phần '2.4. Cấu trúc điều khiển':\n\nNội dung phần '2.4.2 Switch…case':\n\nif condition1 :\n    indentedStatementBlockForTrueCondition1\nelif condition2 :\n    indentedStatementBlockForFirstTrueCondition2\nelif condition3 :\n    indentedStatementBlockForFirstTrueCondition3\nelif condition4 :\n    indentedStatementBlockForFirstTrueCondition4\nelse:\n    indentedStatementBlockForEachConditionFalse\n2.4.2 Switch…case\nPython không có cấu trúc switch … case\n2.4.3 For…in\nfor iterating_var in sequence:\n    statements(s)\nVí dụ: Nội dung phần '2.4.3 For…in':\n\nif condition1 :\n    indentedStatementBlockForTrueCondition1\nelif condition2 :\n    indentedStatementBlockForFirstTrueCondition2\nelif condition3 :\n    indentedStatementBlockForFirstTrueCondition3\nelif condition4 :\n    indentedStatementBlockForFirstTrueCondition4\nelse:\n    indentedStatementBlockForEachConditionFalse\n2.4.2 Switch…case\nPython không có cấu trúc switch … case\n2.4.3 For…in\nfor iterating_var in sequence:\n    statements(s)\nVí dụ:\nfor letter in 'Python':     # First Example\n    print 'Current Letter :', letter\nfruits = ['banana', 'apple',  'mango']\nfor fruit in fruits:        # Second Example\n    print 'Current fruit :', fruit\nprint \"Good bye!\"\nKết quả hiển thị của ví dụ trên:\nCurrent Letter : P\nCurrent Letter : y\nCurrent Letter : t\nCurrent Letter : h\nCurrent Letter : o\nCurrent Letter : n\nCurrent fruit : banana\nCurrent fruit : apple\nCurrent fruit : mango\nGood bye 2.4.4 While Nội dung phần '2.4.4 While':\n\nwhile expression:\n    statement(s)\nVí dụ:\ncount = 0\nwhile (count < 9):\n   print 'The count is:', count\n   count = count + 1\n    \nprint \"Good bye!\"\nKết quả hiển thị của ví dụ trên:"
          },
          {
            "title": "2.5. Hàm",
            "page": 15,
            "children": [],
            "content": "Nội dung phần '2.5. Hàm':\n\nThe count is: 0\nThe count is: 1\nThe count is: 2\nThe count is: 3\nThe count is: 4\nThe count is: 5\nThe count is: 6\nThe count is: 7\nThe count is: 8\nGood bye 2.5 Hàm\nKhai báo hàm theo cú pháp:\ndef functionname(param, param2,..):\n    statements(s)\nHàm nếu không trả dữ liệu thì mặc định sẽ trả về giá trị\nNone\nVí dụ khai báo hàm tính và trả về giá trị tổng của 2 tham\nsố đầu vào:\ndef sum(a, b):\n    return (a+b)    \nCách gọi hàm:\nsum(1, 2)\n(trả về giá trị là 3)   \nHàm có hỗ trợ giá trị mặc định cho tham số khi không\ntruyền vào Ví dụ hàm sau:\ndef plus(c, d = 10):\n    return (c+d)\nNếu gọi hàm trên như sau:\nplus(2)\n(kết quả trả về là 12)\nMột khác biệt trong cách gọi hàm của Python so với PHP\nlà chúng ta có thể thay đổi thứ tự tham số truyền vào bằng"
          },
          {
            "title": "2.6. Xử lý chuỗi",
            "page": 17,
            "children": [
              {
                "title": "2.6.1. Nối chuỗi",
                "page": 18,
                "children": [],
                "content": "Nội dung phần '2.6.1. Nối chuỗi':\n\nparagraph = \"\"\"This is line 1\nThis is line 2\nThis is line 3\"\"\"\n2.6.1 Nối chuỗi\nCó thể tạo một chuỗi dài từ việc nối các chuỗi lại theo cú\npháp:\nstr = str1 + \" \" + str2\n2.6.2 Trích xuất chuỗi con\nCó thể tạo các chuỗi con thông qua toán tử lấy khoản\n[start:end]  (range) Mặc định start  là từ vị trí đầu chuỗi\n( 0 ) và end  là đến vị trí cuối chuỗi Ví dụ:"
              },
              {
                "title": "2.6.2. Trích xuất chuỗi con",
                "page": 18,
                "children": [],
                "content": "Nội dung phần '2.6.2. Trích xuất chuỗi con':\n\nparagraph = \"\"\"This is line 1\nThis is line 2\nThis is line 3\"\"\"\n2.6.1 Nối chuỗi\nCó thể tạo một chuỗi dài từ việc nối các chuỗi lại theo cú\npháp:\nstr = str1 + \" \" + str2\n2.6.2 Trích xuất chuỗi con\nCó thể tạo các chuỗi con thông qua toán tử lấy khoản\n[start:end]  (range) Mặc định start  là từ vị trí đầu chuỗi\n( 0 ) và end  là đến vị trí cuối chuỗi Ví dụ:"
              },
              {
                "title": "2.6.3. Lấy độ dài của chuỗi",
                "page": 19,
                "children": [],
                "content": "Nội dung phần '2.6.3. Lấy độ dài của chuỗi':\n\nstr = 'Hello world'\n    \nprint str[0:4]\n(Hiển thị \"Hell\")   \n    \nprint str[:4]\n(Hiển thị \"Hell\")   \n    \nprint str[-3:]\n(Hiển thị \"rld\")\n    \nprint str[6:-3]\n(Hiển thị \"wo\")\n2.6.3 Lấy độ dài của chuỗi\nSử dụng hàm len(...)  để trả về độ dài của chuỗi Ví dụ:\ncount = len(\"Hello world\")  \n(count có giá trị 11)\n2.6.4 Tìm & thay thế nội dung\nCó thể tìm và thay thế trong chuỗi bằng cách gọi phương"
              },
              {
                "title": "2.6.4. Tìm & thay thế nội dung",
                "page": 20,
                "children": [],
                "content": "Nội dung phần '2.6.4. Tìm & thay thế nội dung':\n\nthức replace(search, replace[, max])  của một chuỗi Ví\ndụ:\nstr = 'Hello world'\nnewstr = str.replace('Hello', 'Bye')\nprint newstr\n(Sẽ hiển thị chuỗi \"Bye world\" trên màn hình)\n2.6.5 Tìm vị trí chuỗi con\nCó thể tìm vị trí của một chuỗi con trong chuỗi lớn bằng\ncách gọi phương thức find(str, beg=0\nend=len(string)) Bắt đầu là vị trí 0 , nếu không tìm ra thì\ntrả về -1 Ví dụ:\nstr = 'Hello world'\nprint str.find('world')\n(hiển thị 6)\n    \nprint str.find('Bye');\n(hiển thị -1)\nHàm find()  sẽ tìm theo thứ tự từ trái qua phải của chuỗi,"
              },
              {
                "title": "2.6.5. Tìm vị trí chuỗi con",
                "page": 20,
                "children": [],
                "content": "Nội dung phần '2.6.5. Tìm vị trí chuỗi con':\n\nthức replace(search, replace[, max])  của một chuỗi Ví\ndụ:\nstr = 'Hello world'\nnewstr = str.replace('Hello', 'Bye')\nprint newstr\n(Sẽ hiển thị chuỗi \"Bye world\" trên màn hình)\n2.6.5 Tìm vị trí chuỗi con\nCó thể tìm vị trí của một chuỗi con trong chuỗi lớn bằng\ncách gọi phương thức find(str, beg=0\nend=len(string)) Bắt đầu là vị trí 0 , nếu không tìm ra thì\ntrả về -1 Ví dụ:\nstr = 'Hello world'\nprint str.find('world')\n(hiển thị 6)\n    \nprint str.find('Bye');\n(hiển thị -1)\nHàm find()  sẽ tìm theo thứ tự từ trái qua phải của chuỗi,"
              },
              {
                "title": "2.6.6. Tách chuỗi",
                "page": 21,
                "children": [],
                "content": "Nội dung phần '2.6.6. Tách chuỗi':\n\ntức là từ lần xuất hiện đầu tiên Có thể dùng hàm rfind()\nđể tìm theo vị trí từ cuối chuỗi về phía trước 2.6.6 Tách chuỗi\nCó thể tách chuỗi dựa theo một chuỗi delimeter bằng cách\ngọi phương thức split(str=\"\", num=string.count(str)) Ví dụ:\nstr = 'Hello world'\nprint str.split(' ')\n(Trả về một mảng có 2 phần tử là 2 chuỗi \"Hello\" và\n \"world\")\nCó thể sử dụng hàm splitlines()  để tách chuỗi theo\ntừng hàng và loại bỏ ký tự NEWLINE 2.6.7 Trim ký tự khoẳng trắng\nCó thể loại bỏ các ký tự (mặc định là ký tự khoảng trắng)\ntrước và sau một chuỗi, bằng cách gọi các phương thức\nsau:"
              },
              {
                "title": "2.6.7. Trim ký tự khoẳng trắng",
                "page": 21,
                "children": [],
                "content": "Nội dung phần '2.6.7. Trim ký tự khoẳng trắng':\n\ntức là từ lần xuất hiện đầu tiên Có thể dùng hàm rfind()\nđể tìm theo vị trí từ cuối chuỗi về phía trước 2.6.6 Tách chuỗi\nCó thể tách chuỗi dựa theo một chuỗi delimeter bằng cách\ngọi phương thức split(str=\"\", num=string.count(str)) Ví dụ:\nstr = 'Hello world'\nprint str.split(' ')\n(Trả về một mảng có 2 phần tử là 2 chuỗi \"Hello\" và\n \"world\")\nCó thể sử dụng hàm splitlines()  để tách chuỗi theo\ntừng hàng và loại bỏ ký tự NEWLINE 2.6.7 Trim ký tự khoẳng trắng\nCó thể loại bỏ các ký tự (mặc định là ký tự khoảng trắng)\ntrước và sau một chuỗi, bằng cách gọi các phương thức\nsau:"
              },
              {
                "title": "2.6.8. Một số hàm xử lý chuỗi",
                "page": 22,
                "children": [],
                "content": "Nội dung phần '2.6.8. Một số hàm xử lý chuỗi':\n\nstrip([chars]) : loại bỏ trước và sau chuỗi\nlstrip([chars]) : loại bỏ phía trước chuỗi\nrstrip([chars]) : loại bỏ phía sau chuỗi\n2.6.8 Một số hàm xử lý chuỗi\nisnumeric() : Kiểm tra một chuỗi có phải là chuỗi số\nlower() : Chuyển chuỗi hết thành chữ thường\nupper() : Chuyển chuỗi hết thành chữ HOA\n2.7 List\nList trong Python là cấu trúc mảng và các phần tử có index\ncó thứ tự Không như PHP, key của một mảng có thể vừa\nlà số, vừa là chuỗi (associated array) Trong Python, muốn tạo một mảng có key là chuỗi thì sẽ\nsử dụng cấu trúc Dictionary (phần tiếp tiếp) Trong phần\nnày, chúng ta sẽ nói đến List Một List được khai báo như\nmảng trong JSON Sử dụng [..]  để khai báo một mảng Ví dụ:"
              }
            ],
            "content": "Nội dung phần '2.6. Xử lý chuỗi':\n\nNội dung phần '2.6.1 Nối chuỗi':\n\nparagraph = \"\"\"This is line 1\nThis is line 2\nThis is line 3\"\"\"\n2.6.1 Nối chuỗi\nCó thể tạo một chuỗi dài từ việc nối các chuỗi lại theo cú\npháp:\nstr = str1 + \" \" + str2\n2.6.2 Trích xuất chuỗi con\nCó thể tạo các chuỗi con thông qua toán tử lấy khoản\n[start:end]  (range) Mặc định start  là từ vị trí đầu chuỗi\n( 0 ) và end  là đến vị trí cuối chuỗi Ví dụ: Nội dung phần '2.6.2 Trích xuất chuỗi con':\n\nparagraph = \"\"\"This is line 1\nThis is line 2\nThis is line 3\"\"\"\n2.6.1 Nối chuỗi\nCó thể tạo một chuỗi dài từ việc nối các chuỗi lại theo cú\npháp:\nstr = str1 + \" \" + str2\n2.6.2 Trích xuất chuỗi con\nCó thể tạo các chuỗi con thông qua toán tử lấy khoản\n[start:end]  (range) Mặc định start  là từ vị trí đầu chuỗi\n( 0 ) và end  là đến vị trí cuối chuỗi Ví dụ: Nội dung phần '2.6.3 Lấy độ dài của chuỗi':\n\nstr = 'Hello world'\n    \nprint str[0:4]\n(Hiển thị \"Hell\")   \n    \nprint str[:4]\n(Hiển thị \"Hell\")   \n    \nprint str[-3:]\n(Hiển thị \"rld\")\n    \nprint str[6:-3]\n(Hiển thị \"wo\")\n2.6.3 Lấy độ dài của chuỗi\nSử dụng hàm len(...)  để trả về độ dài của chuỗi Ví dụ:\ncount = len(\"Hello world\")  \n(count có giá trị 11)\n2.6.4 Tìm & thay thế nội dung\nCó thể tìm và thay thế trong chuỗi bằng cách gọi phương Nội dung phần '2.6.4 Tìm & thay thế nội dung':\n\nthức replace(search, replace[, max])  của một chuỗi Ví\ndụ:\nstr = 'Hello world'\nnewstr = str.replace('Hello', 'Bye')\nprint newstr\n(Sẽ hiển thị chuỗi \"Bye world\" trên màn hình)\n2.6.5 Tìm vị trí chuỗi con\nCó thể tìm vị trí của một chuỗi con trong chuỗi lớn bằng\ncách gọi phương thức find(str, beg=0\nend=len(string)) Bắt đầu là vị trí 0 , nếu không tìm ra thì\ntrả về -1 Ví dụ:\nstr = 'Hello world'\nprint str.find('world')\n(hiển thị 6)\n    \nprint str.find('Bye');\n(hiển thị -1)\nHàm find()  sẽ tìm theo thứ tự từ trái qua phải của chuỗi, Nội dung phần '2.6.5 Tìm vị trí chuỗi con':\n\nthức replace(search, replace[, max])  của một chuỗi Ví\ndụ:\nstr = 'Hello world'\nnewstr = str.replace('Hello', 'Bye')\nprint newstr\n(Sẽ hiển thị chuỗi \"Bye world\" trên màn hình)\n2.6.5 Tìm vị trí chuỗi con\nCó thể tìm vị trí của một chuỗi con trong chuỗi lớn bằng\ncách gọi phương thức find(str, beg=0\nend=len(string)) Bắt đầu là vị trí 0 , nếu không tìm ra thì\ntrả về -1 Ví dụ:\nstr = 'Hello world'\nprint str.find('world')\n(hiển thị 6)\n    \nprint str.find('Bye');\n(hiển thị -1)\nHàm find()  sẽ tìm theo thứ tự từ trái qua phải của chuỗi, Nội dung phần '2.6.6 Tách chuỗi':\n\ntức là từ lần xuất hiện đầu tiên Có thể dùng hàm rfind()\nđể tìm theo vị trí từ cuối chuỗi về phía trước 2.6.6 Tách chuỗi\nCó thể tách chuỗi dựa theo một chuỗi delimeter bằng cách\ngọi phương thức split(str=\"\", num=string.count(str)) Ví dụ:\nstr = 'Hello world'\nprint str.split(' ')\n(Trả về một mảng có 2 phần tử là 2 chuỗi \"Hello\" và\n \"world\")\nCó thể sử dụng hàm splitlines()  để tách chuỗi theo\ntừng hàng và loại bỏ ký tự NEWLINE 2.6.7 Trim ký tự khoẳng trắng\nCó thể loại bỏ các ký tự (mặc định là ký tự khoảng trắng)\ntrước và sau một chuỗi, bằng cách gọi các phương thức\nsau: Nội dung phần '2.6.7\n\nTrim ký tự khoẳng trắng':\n\ntức là từ lần xuất hiện đầu tiên Có thể dùng hàm rfind()\nđể tìm theo vị trí từ cuối chuỗi về phía trước 2.6.6 Tách chuỗi\nCó thể tách chuỗi dựa theo một chuỗi delimeter bằng cách\ngọi phương thức split(str=\"\", num=string.count(str)) Ví dụ:\nstr = 'Hello world'\nprint str.split(' ')\n(Trả về một mảng có 2 phần tử là 2 chuỗi \"Hello\" và\n \"world\")\nCó thể sử dụng hàm splitlines()  để tách chuỗi theo\ntừng hàng và loại bỏ ký tự NEWLINE 2.6.7 Trim ký tự khoẳng trắng\nCó thể loại bỏ các ký tự (mặc định là ký tự khoảng trắng)\ntrước và sau một chuỗi, bằng cách gọi các phương thức\nsau: Nội dung phần '2.6.8 Một số hàm xử lý chuỗi':\n\nstrip([chars]) : loại bỏ trước và sau chuỗi\nlstrip([chars]) : loại bỏ phía trước chuỗi\nrstrip([chars]) : loại bỏ phía sau chuỗi\n2.6.8 Một số hàm xử lý chuỗi\nisnumeric() : Kiểm tra một chuỗi có phải là chuỗi số\nlower() : Chuyển chuỗi hết thành chữ thường\nupper() : Chuyển chuỗi hết thành chữ HOA\n2.7 List\nList trong Python là cấu trúc mảng và các phần tử có index\ncó thứ tự Không như PHP, key của một mảng có thể vừa\nlà số, vừa là chuỗi (associated array) Trong Python, muốn tạo một mảng có key là chuỗi thì sẽ\nsử dụng cấu trúc Dictionary (phần tiếp tiếp) Trong phần\nnày, chúng ta sẽ nói đến List Một List được khai báo như\nmảng trong JSON Sử dụng [..]  để khai báo một mảng Ví dụ:"
          },
          {
            "title": "2.7. List",
            "page": 22,
            "children": [
              {
                "title": "2.7.1. Kiểm tra sự tồn tại của một phần tử",
                "page": 24,
                "children": [],
                "content": "Nội dung phần '2.7.1. Kiểm tra sự tồn tại của một phần tử':\n\nTrong nhiều trường hợp bạn muốn truy xuất một phần tử\nbất kỳ (dựa vào index) của mảng thì nếu truy xuất đến một\nphần tử không tồn tại thì ứng dụng sẽ báo lỗi Do đó, trước\nkhi truy xuất một phần tử, bạn cần kiểm tra xem phần tử\nnày đã tồn tại hay chưa Hiện tại python không hỗ trợ hàm\nnào để kiểm tra sự tồn tại của một phần tử trong mảng Có 2 cách thường thấy để kiểm tra đó là “Look before you\nleap” (LBYL) và “Easier to ask forgiveness than\npermission” (EAFP) Ví dụ về “Look before you leap (LBYL)”:\nif index < len(array):\n    array[index]\nelse:\n    # handle this\nVí dụ về “Easier to ask forgiveness than permission”\n(EAFP):\ntry:\n    array[index]\nexcept IndexError:\n    # handle this\n2.7.1.2 Kiểm tra theo giá trị\nĐể kiểm tra một giá trị có tồn tại / không tồn tại trong\nmảng hay không thì có thể sử dụng toán tử in  / not in Ví\ndụ:\nmylist = ['a', 'b', 'c']\n    \nprint 'a' in mylist\n(Hiển thị True)\n    \nprint 'b' not in mylist\n(Hiển thị False)\n2.7.2 Trích xuất mảng con\nTương tự như chuỗi, tó thể tạo các mảng con thông qua\ntoán tử lấy khoản [start:end]  (range) Mặc định start  là"
              },
              {
                "title": "2.7.2. Trích xuất mảng con",
                "page": 26,
                "children": [],
                "content": "Nội dung phần '2.7.2. Trích xuất mảng con':\n\ntừ vị trí đầu chuỗi ( 0 ) và end  là đến vị trí cuối chuỗi Ví dụ:\nnumbers = ['a', 'b', 'c', 'd']\n    \nprint numbers[:2]\n(Hiển thị ['a', 'b'])\n    \nprint numbers[-2:]\n(Hiển thị ['c', 'd'])\n2.7.3 Xóa phần tử của mảng\nCó thể xóa một phần tử thông qua toán tử del Thứ tự của\ncác phần tử sẽ dịch chuyển tùy vào vị trí của phần tử bị\nxóa Ví dụ:\nnumbers = [1, 2, 3, 4, 5]\ndel numbers[0]\nprint numbers\n(Hiển thị [2, 3, 4, 5])\nBạn có thể xóa một khoản dựa vào toán tử lấy khoản\n[start:end] Ví dụ:"
              },
              {
                "title": "2.7.3. Xóa phần tử của mảng",
                "page": 26,
                "children": [],
                "content": "Nội dung phần '2.7.3. Xóa phần tử của mảng':\n\ntừ vị trí đầu chuỗi ( 0 ) và end  là đến vị trí cuối chuỗi Ví dụ:\nnumbers = ['a', 'b', 'c', 'd']\n    \nprint numbers[:2]\n(Hiển thị ['a', 'b'])\n    \nprint numbers[-2:]\n(Hiển thị ['c', 'd'])\n2.7.3 Xóa phần tử của mảng\nCó thể xóa một phần tử thông qua toán tử del Thứ tự của\ncác phần tử sẽ dịch chuyển tùy vào vị trí của phần tử bị\nxóa Ví dụ:\nnumbers = [1, 2, 3, 4, 5]\ndel numbers[0]\nprint numbers\n(Hiển thị [2, 3, 4, 5])\nBạn có thể xóa một khoản dựa vào toán tử lấy khoản\n[start:end] Ví dụ:"
              },
              {
                "title": "2.7.4. Nối 2 mảng",
                "page": 27,
                "children": [],
                "content": "Nội dung phần '2.7.4. Nối 2 mảng':\n\nnumbers = [1, 2, 3, 4, 5, 6, 7]\ndel numbers[2:4]\nprint numbers\n(Hiển thị [1, 2, 5, 6, 7])  \n2.7.4 Nối 2 mảng\nBạn có thể sử dụng toán tử +  để nối giá trị của 2 mảng và\ntạo ra một mảng lớn có số lượng phần tử là tổng số lượng\nphần tử của 2 mảng con Ví dụ:\na = [1, 2]\nb = [1, 3]\n    \nprint a + b\n(Hiển thị [1, 2, 1, 3])\n2.7.5 Thêm phần tử vào mảng\nNếu bạn muốn thêm phần tử vào một mảng đã tồn tại, hãy\ndùng phương thức list.append(newvalue)  để thêm phần\ntử có giá trị newvalue  vào cuối mảng list Ví dụ:"
              },
              {
                "title": "2.7.5. Thêm phần tử vào mảng",
                "page": 27,
                "children": [],
                "content": "Nội dung phần '2.7.5. Thêm phần tử vào mảng':\n\nnumbers = [1, 2, 3, 4, 5, 6, 7]\ndel numbers[2:4]\nprint numbers\n(Hiển thị [1, 2, 5, 6, 7])  \n2.7.4 Nối 2 mảng\nBạn có thể sử dụng toán tử +  để nối giá trị của 2 mảng và\ntạo ra một mảng lớn có số lượng phần tử là tổng số lượng\nphần tử của 2 mảng con Ví dụ:\na = [1, 2]\nb = [1, 3]\n    \nprint a + b\n(Hiển thị [1, 2, 1, 3])\n2.7.5 Thêm phần tử vào mảng\nNếu bạn muốn thêm phần tử vào một mảng đã tồn tại, hãy\ndùng phương thức list.append(newvalue)  để thêm phần\ntử có giá trị newvalue  vào cuối mảng list Ví dụ:"
              },
              {
                "title": "2.7.6. Lấy phần tử cuối mảng",
                "page": 28,
                "children": [],
                "content": "Nội dung phần '2.7.6. Lấy phần tử cuối mảng':\n\nnumbers = [1, 2, 3]\nnumbers.append(4)\nprint numbers\n(Hiển thị [1, 2, 3, 4]\n2.7.6 Lấy phần tử cuối mảng\nNếu muốn lấy phần tử cuối cùng của mảng ra khỏi mảng,\ncó thể sử dụng phương thức list.pop() , sẽ trả về giá trị\ncủa phần tử cuối cùng và mảng bây giờ sẽ không còn phần\ntử này numbers = [1, 2, 3]\nmynumber = numbers.pop()\nprint mynumber\n(Hiển thị 3)\n    \nprint numbers\n(Hiển thị [1, 2])\n2.7.7 Tìm một giá trị trong mảng\nNếu bạn muốn tìm vị trí (index) của một giá trị trong một"
              },
              {
                "title": "2.7.7. Tìm một giá trị trong mảng",
                "page": 29,
                "children": [],
                "content": "Nội dung phần '2.7.7. Tìm một giá trị trong mảng':\n\nmảng, có thể dùng phương thức list.index(obj) Nếu\ntìm thấy sẽ trả về index của phần tử đầu tiên tìm thấy Nếu\nkhông tìm thấy sẽ quăng Exception Ví dụ:\naList = [123, 'xyz', 'zara', 'abc'];\nprint \"Index for xyz : \", aList.index('xyz') \nprint \"Index for zara : \", aList.index('zara')\nKhi chạy sẽ hiển thị kết quả:\nIndex for xyz :  1\nIndex for zara :  2 \n2.7.8 Đảo ngược giá trị của mảng\nĐể đảo ngược thứ tự các giá trị của một mảng, sử dụng\nphương thức list.reverse() Phương thức này không trả\nvề kết quả mà thay đổi trực tiếp mảng list Ví dụ:"
              },
              {
                "title": "2.7.8. Đảo ngược giá trị của mảng",
                "page": 29,
                "children": [],
                "content": "Nội dung phần '2.7.8. Đảo ngược giá trị của mảng':\n\nmảng, có thể dùng phương thức list.index(obj) Nếu\ntìm thấy sẽ trả về index của phần tử đầu tiên tìm thấy Nếu\nkhông tìm thấy sẽ quăng Exception Ví dụ:\naList = [123, 'xyz', 'zara', 'abc'];\nprint \"Index for xyz : \", aList.index('xyz') \nprint \"Index for zara : \", aList.index('zara')\nKhi chạy sẽ hiển thị kết quả:\nIndex for xyz :  1\nIndex for zara :  2 \n2.7.8 Đảo ngược giá trị của mảng\nĐể đảo ngược thứ tự các giá trị của một mảng, sử dụng\nphương thức list.reverse() Phương thức này không trả\nvề kết quả mà thay đổi trực tiếp mảng list Ví dụ:"
              },
              {
                "title": "2.7.9. Sắp xếp giá trị các phần tử",
                "page": 30,
                "children": [],
                "content": "Nội dung phần '2.7.9. Sắp xếp giá trị các phần tử':\n\nnumbers = [1, 2, 3, 4]\nnumbers.reverse()\nprint numbers\n(Hiển thị [4, 3, 2, 1])\n2.7.9 Sắp xếp giá trị các phần tử\nĐể sắp xếp thứ tự của giá trị trong mảng, sử dụng phương\nthức list.sort([func])  để sắp xếp Nếu tham số đầu\nvào là hàm func  không truyền vào thì mặc định là sắp xếp\ntheo giá trị tăng dần Phương thức này không trả về kết\nquả mà thay đổi trực tiếp mảng list Ví dụ:\naList = [123, 'xyz', 'zara', 'abc', 'xyz']\naList.sort()\nprint \"List : \", aList\n(Hiển thị List :  [123, 'abc', 'xyz', 'xyz', 'zara'\n])\nCách triển khai hàm compare func()  cũng giống như hàm\nusort trong PHP Hàm trả về các giá trị 0 , -1  và 1"
              }
            ],
            "content": "Nội dung phần '2.7. List':\n\nNội dung phần '2.7.1 Kiểm tra sự tồn tại của một phần tử':\n\nTrong nhiều trường hợp bạn muốn truy xuất một phần tử\nbất kỳ (dựa vào index) của mảng thì nếu truy xuất đến một\nphần tử không tồn tại thì ứng dụng sẽ báo lỗi Do đó, trước\nkhi truy xuất một phần tử, bạn cần kiểm tra xem phần tử\nnày đã tồn tại hay chưa Hiện tại python không hỗ trợ hàm\nnào để kiểm tra sự tồn tại của một phần tử trong mảng Có 2 cách thường thấy để kiểm tra đó là “Look before you\nleap” (LBYL) và “Easier to ask forgiveness than\npermission” (EAFP) Ví dụ về “Look before you leap (LBYL)”:\nif index < len(array):\n    array[index]\nelse:\n    # handle this\nVí dụ về “Easier to ask forgiveness than permission”\n(EAFP):\ntry:\n    array[index]\nexcept IndexError:\n    # handle this\n2.7.1.2 Kiểm tra theo giá trị\nĐể kiểm tra một giá trị có tồn tại / không tồn tại trong\nmảng hay không thì có thể sử dụng toán tử in  / not in Ví\ndụ:\nmylist = ['a', 'b', 'c']\n    \nprint 'a' in mylist\n(Hiển thị True)\n    \nprint 'b' not in mylist\n(Hiển thị False)\n2.7.2 Trích xuất mảng con\nTương tự như chuỗi, tó thể tạo các mảng con thông qua\ntoán tử lấy khoản [start:end]  (range) Mặc định start  là Nội dung phần '2.7.2 Trích xuất mảng con':\n\ntừ vị trí đầu chuỗi ( 0 ) và end  là đến vị trí cuối chuỗi Ví dụ:\nnumbers = ['a', 'b', 'c', 'd']\n    \nprint numbers[:2]\n(Hiển thị ['a', 'b'])\n    \nprint numbers[-2:]\n(Hiển thị ['c', 'd'])\n2.7.3 Xóa phần tử của mảng\nCó thể xóa một phần tử thông qua toán tử del Thứ tự của\ncác phần tử sẽ dịch chuyển tùy vào vị trí của phần tử bị\nxóa Ví dụ:\nnumbers = [1, 2, 3, 4, 5]\ndel numbers[0]\nprint numbers\n(Hiển thị [2, 3, 4, 5])\nBạn có thể xóa một khoản dựa vào toán tử lấy khoản\n[start:end] Ví dụ: Nội dung phần '2.7.3 Xóa phần tử của mảng':\n\ntừ vị trí đầu chuỗi ( 0 ) và end  là đến vị trí cuối chuỗi Ví dụ:\nnumbers = ['a', 'b', 'c', 'd']\n    \nprint numbers[:2]\n(Hiển thị ['a', 'b'])\n    \nprint numbers[-2:]\n(Hiển thị ['c', 'd'])\n2.7.3 Xóa phần tử của mảng\nCó thể xóa một phần tử thông qua toán tử del Thứ tự của\ncác phần tử sẽ dịch chuyển tùy vào vị trí của phần tử bị\nxóa Ví dụ:\nnumbers = [1, 2, 3, 4, 5]\ndel numbers[0]\nprint numbers\n(Hiển thị [2, 3, 4, 5])\nBạn có thể xóa một khoản dựa vào toán tử lấy khoản\n[start:end] Ví dụ: Nội dung phần '2.7.4 Nối 2 mảng':\n\nnumbers = [1, 2, 3, 4, 5, 6, 7]\ndel numbers[2:4]\nprint numbers\n(Hiển thị [1, 2, 5, 6, 7])  \n2.7.4 Nối 2 mảng\nBạn có thể sử dụng toán tử +  để nối giá trị của 2 mảng và\ntạo ra một mảng lớn có số lượng phần tử là tổng số lượng\nphần tử của 2 mảng con Ví dụ:\na = [1, 2]\nb = [1, 3]\n    \nprint a + b\n(Hiển thị [1, 2, 1, 3])\n2.7.5 Thêm phần tử vào mảng\nNếu bạn muốn thêm phần tử vào một mảng đã tồn tại, hãy\ndùng phương thức list.append(newvalue)  để thêm phần\ntử có giá trị newvalue  vào cuối mảng list Ví dụ: Nội dung phần '2.7.5\n\nThêm phần tử vào mảng':\n\nnumbers = [1, 2, 3, 4, 5, 6, 7]\ndel numbers[2:4]\nprint numbers\n(Hiển thị [1, 2, 5, 6, 7])  \n2.7.4 Nối 2 mảng\nBạn có thể sử dụng toán tử +  để nối giá trị của 2 mảng và\ntạo ra một mảng lớn có số lượng phần tử là tổng số lượng\nphần tử của 2 mảng con Ví dụ:\na = [1, 2]\nb = [1, 3]\n    \nprint a + b\n(Hiển thị [1, 2, 1, 3])\n2.7.5 Thêm phần tử vào mảng\nNếu bạn muốn thêm phần tử vào một mảng đã tồn tại, hãy\ndùng phương thức list.append(newvalue)  để thêm phần\ntử có giá trị newvalue  vào cuối mảng list Ví dụ: Nội dung phần '2.7.6 Lấy phần tử cuối mảng':\n\nnumbers = [1, 2, 3]\nnumbers.append(4)\nprint numbers\n(Hiển thị [1, 2, 3, 4]\n2.7.6 Lấy phần tử cuối mảng\nNếu muốn lấy phần tử cuối cùng của mảng ra khỏi mảng,\ncó thể sử dụng phương thức list.pop() , sẽ trả về giá trị\ncủa phần tử cuối cùng và mảng bây giờ sẽ không còn phần\ntử này numbers = [1, 2, 3]\nmynumber = numbers.pop()\nprint mynumber\n(Hiển thị 3)\n    \nprint numbers\n(Hiển thị [1, 2])\n2.7.7 Tìm một giá trị trong mảng\nNếu bạn muốn tìm vị trí (index) của một giá trị trong một Nội dung phần '2.7.7 Tìm một giá trị trong mảng':\n\nmảng, có thể dùng phương thức list.index(obj) Nếu\ntìm thấy sẽ trả về index của phần tử đầu tiên tìm thấy Nếu\nkhông tìm thấy sẽ quăng Exception Ví dụ:\naList = [123, 'xyz', 'zara', 'abc'];\nprint \"Index for xyz : \", aList.index('xyz') \nprint \"Index for zara : \", aList.index('zara')\nKhi chạy sẽ hiển thị kết quả:\nIndex for xyz :  1\nIndex for zara :  2 \n2.7.8 Đảo ngược giá trị của mảng\nĐể đảo ngược thứ tự các giá trị của một mảng, sử dụng\nphương thức list.reverse() Phương thức này không trả\nvề kết quả mà thay đổi trực tiếp mảng list Ví dụ: Nội dung phần '2.7.8 Đảo ngược giá trị của mảng':\n\nmảng, có thể dùng phương thức list.index(obj) Nếu\ntìm thấy sẽ trả về index của phần tử đầu tiên tìm thấy Nếu\nkhông tìm thấy sẽ quăng Exception Ví dụ:\naList = [123, 'xyz', 'zara', 'abc'];\nprint \"Index for xyz : \", aList.index('xyz') \nprint \"Index for zara : \", aList.index('zara')\nKhi chạy sẽ hiển thị kết quả:\nIndex for xyz :  1\nIndex for zara :  2 \n2.7.8 Đảo ngược giá trị của mảng\nĐể đảo ngược thứ tự các giá trị của một mảng, sử dụng\nphương thức list.reverse() Phương thức này không trả\nvề kết quả mà thay đổi trực tiếp mảng list Ví dụ: Nội dung phần '2.7.9 Sắp xếp giá trị các phần tử':\n\nnumbers = [1, 2, 3, 4]\nnumbers.reverse()\nprint numbers\n(Hiển thị [4, 3, 2, 1])\n2.7.9 Sắp xếp giá trị các phần tử\nĐể sắp xếp thứ tự của giá trị trong mảng, sử dụng phương\nthức list.sort([func])  để sắp xếp Nếu tham số đầu\nvào là hàm func  không truyền vào thì mặc định là sắp xếp\ntheo giá trị tăng dần Phương thức này không trả về kết\nquả mà thay đổi trực tiếp mảng list Ví dụ:\naList = [123, 'xyz', 'zara', 'abc', 'xyz']\naList.sort()\nprint \"List : \", aList\n(Hiển thị List :  [123, 'abc', 'xyz', 'xyz', 'zara'\n])\nCách triển khai hàm compare func()  cũng giống như hàm\nusort trong PHP Hàm trả về các giá trị 0 , -1  và 1"
          },
          {
            "title": "2.8. Tuple",
            "page": 31,
            "children": [],
            "content": "Nội dung phần '2.8. Tuple':\n\n2.8 Tuple\nTuple cũng là một cấu trúc mảng, tương tự như cấu trúc\nList Một số điểm khác nhau cơ bản là khai báo Tuple sử\ndụng cặp dấu ngoặc (...)  và một tuple đã được khai báo\nrồi thì không thay đổi được giá trị (immutable) và không hỗ\ntrợ các phương thức như append() , pop() …Ví dụ:\nmytuple = ('x', 'y', 'z')\nprint mytuple\n(Hiển thị ('x', 'y', 'z'))\nVẫn hỗ trợ các cách để truy xuất phần tử giống List như là\ntruy xuất theo index, range, tìm kiếm…\n2.9 Dictionary\nDictionary cũng là một cấu trúc mảng, nhưng các phần tử\nbao gồm key và value Nếu bạn có biết JSON thì cấu trúc\nDictionary tương tự như một object json Một Dictionary\nđược khai báo bằng cặp dấu ngoặc {...} Ví dụ:"
          },
          {
            "title": "2.9. Dictionary",
            "page": 31,
            "children": [
              {
                "title": "2.9.1. Thêm một phần tử",
                "page": 32,
                "children": [],
                "content": "Nội dung phần '2.9.1. Thêm một phần tử':\n\npoint = {'x': 1, 'y': 2}\nTruy xuất một giá trị dựa vào key của đối tượng Ví dụ:\npoint = {'x': 3, 'y': 6, 'z' : 9}\nprint point[x]\n(Hiển thị 3)\n2.9.1 Thêm một phần tử\nĐể thêm một phần tử vào đối tượng đã khai báo, sử dụng\ncấu trúc dict[key] = value Ví dụ:\nuser = {'name': 'Jone', 'age': 30}\nuser['country'] = 'Vietnam'\nprint user\n(Hiển thị {'country': 'Vietnam', 'age': 30, 'name':\n 'Jone'})\n2.9.2 Một số hàm, phương thức thông dụng:\ndict.clear() : Xóa toàn bộ dữ liệu bên trong đối"
              },
              {
                "title": "2.9.2. Một số hàm, phương thức thông dụng:",
                "page": 33,
                "children": [],
                "content": "Nội dung phần '2.9.2. Một số hàm, phương thức thông dụng:':\n\ntượng\ndict.copy() : Trả về một bản copy của đối tượng\ndict.fromkeys(seq[, value]) : Tạo một đối tượng với\ndanh sách key từ seq và nếu có truyền value  thì lấy\nđó làm giá trị cho các phần tử dict.has_key(key) : kiểm tra một key có tồn tại trong\nđối tượng hay không dict.keys() : Trả về một List chứa các key\ndict.values() : Trả về một List chứa các value"
              }
            ],
            "content": "Nội dung phần '2.9. Dictionary':\n\nNội dung phần '2.9.1 Thêm một phần tử':\n\npoint = {'x': 1, 'y': 2}\nTruy xuất một giá trị dựa vào key của đối tượng Ví dụ:\npoint = {'x': 3, 'y': 6, 'z' : 9}\nprint point[x]\n(Hiển thị 3)\n2.9.1 Thêm một phần tử\nĐể thêm một phần tử vào đối tượng đã khai báo, sử dụng\ncấu trúc dict[key] = value Ví dụ:\nuser = {'name': 'Jone', 'age': 30}\nuser['country'] = 'Vietnam'\nprint user\n(Hiển thị {'country': 'Vietnam', 'age': 30, 'name':\n 'Jone'})\n2.9.2 Một số hàm, phương thức thông dụng:\ndict.clear() : Xóa toàn bộ dữ liệu bên trong đối Nội dung phần '2.9.2 Một số hàm, phương thức thông dụng:':\n\ntượng\ndict.copy() : Trả về một bản copy của đối tượng\ndict.fromkeys(seq[, value]) : Tạo một đối tượng với\ndanh sách key từ seq và nếu có truyền value  thì lấy\nđó làm giá trị cho các phần tử dict.has_key(key) : kiểm tra một key có tồn tại trong\nđối tượng hay không dict.keys() : Trả về một List chứa các key\ndict.values() : Trả về một List chứa các value"
          }
        ],
        "content": "Nội dung Chương 2. Cú pháp: (không có nội dung)."
      },
      {
        "title": "Chương 3. Phân chia module",
        "page": 34,
        "children": [
          {
            "title": "3.1. Các loại module / thư viện",
            "page": 34,
            "children": [],
            "content": "Nội dung phần '3.1. Các loại module / thư viện':\n\nChương 3 Phân chia module\nTất cả ví dụ cho đến thời điểm này đều được thực thi trong\ncommand line hoặc từ một file python .py Tuy nhiên, đối\nvới các ứng dụng lớn, có nhiều chức năng thì phân chia nhỏ\ndự án thành các file khác nhau sẽ giúp dễ bảo trì và tái sử\ndụng các thành phần đã thiết kế Chương này sẽ giúp bạn thiết kế các tính năng theo mô\nhình các module và khi cần thì sẽ gọi file tương ứng và sử\ndụng 3.1 Các loại module / thư viện\nCó 3 loại module thường thấy là:\n1 Viết bằng Python: có phần mở rộng là .py\n2 Các thư viện liên kết động: có phần mở rộng là .dll ,\n.pyd , .so , .sl ,…\n3 C-Module liên kết với trình phiên dịch"
          },
          {
            "title": "3.2. Đường dẫn tìm để load module",
            "page": 35,
            "children": [],
            "content": "Nội dung phần '3.2. Đường dẫn tìm để load module':\n\n3.2 Đường dẫn tìm để load module\nĐể tải một module vào script của bạn, sử dụng cú pháp\nđơn giản:\nimport modulename\nkhi gặp câu lệnh trên thì trình biên dịch sẽ tiến hành tìm\nkiếm file module tương ứng theo thứ tự thư mục sau:\n1 Thư mục hiện hành mà script đang gọi\n2 Các thư mục trong PYTHONPATH (nếu có set)\n3 Các thư mục cài đặt chuẩn trên Linux/Unix. Có thể biết được đường dẫn mà một module đã được load\nbằng đoạn code dưới đây:"
          },
          {
            "title": "3.3. Lấy danh sách thuộc tính và phương thức của một module",
            "page": 36,
            "children": [],
            "content": "Nội dung phần '3.3. Lấy danh sách thuộc tính và phương thức của một module':\n\nimport math\nmath.__file__\n(Ví dụ trả về '/usr/lib/python2.5/lib-dynload/math so')\n    \nimport random\nrandom.__file__\n(Ví dụ trả về '/usr/lib/python2.5/random.pyc')\n3.3 Lấy danh sách thuộc tính và phương\nthức của một module\nĐể lấy được danh sách các thuộc tính và phương thức mà\nmodule hỗ trợ, sử dụng hàm dir(modulename) Ví dụ:"
          },
          {
            "title": "3.4. Cách khai báo và sử dụng module",
            "page": 37,
            "children": [],
            "content": "Nội dung phần '3.4. Cách khai báo và sử dụng module':\n\ndir(math)\n['__doc__', '__file__', '__name__', '__package__', \n'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', \n'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degree\ns', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'fa\nctorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma'\n, 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'lo\ng', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians\n', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']\nCó thể gọi hàm dir()  không truyền tham số để lấy các\nthuộc tính và phương thức của scope hiện tại đang thực\nthi 3.4 Cách khai báo và sử dụng module\nGiả sử bạn tạo một file python mymath.py  có nội dung như\nsau:\ndef cong(a, b):\n    return a + b\n    \ndef tru(a, b):\n    return a - b\n    \ndef nhan(a, b):\n    return a * b\nSau đó, tạo một file có tên myexample.py , trong cùng thư\nmục với file mymath.py  vừa tạo ở trên, có nội dung như\nsau:\nimport mymath\n    \nnum1 = 1\nnum2 = 2\n    \nprint 'Tong hai so la: ', mymath.cong(num1, num2)\nVào command line, thực hiện gọi file myexample như sau:"
          },
          {
            "title": "3.5. Package module",
            "page": 39,
            "children": [],
            "content": "Nội dung phần '3.5. Package module':\n\n$ python myexample.py\nSau khi thực hiện sẽ hiển thị lên màn hình là\nTong hai so la: 3\n3.5 Package module\nCó thể gom nhiều module .py  vào một thư mục và tên thư\nmục là tên của package và tạo một file __init__.py  trong\nthư mục này Như vậy, cấu trúc thư của một package sẽ như sau:\n|-- mypack\n|   |-- __init__.py\n|   |-- mymodule1.py\n|   |-- mymodule2.py\n|\nCó thể sử dụng mymodule1  theo cú pháp import sau:\nimport mypack.mymodule1\nhoặc\nimport mypack.mymodule1 as mymodule1\nhoặc\nimport mypack.mymodule1 as mod\nKhi sử dụng một module thuộc một package thì các lệnh\ntrong file __init__.py  sẽ được thực hiện trước Thông\nthường thì file __init__.py  sẽ rỗng Có thể tạo các subpackage bên trong một package theo\nđúng cấu trúc thư mục, có file __init__.py Ví dụ:\nimport mypack.mysubpack.mysubsubpack.module"
          }
        ],
        "content": "Nội dung phần 'Chương 3. Phân chia module':\n\nNội dung phần '3.1 Các loại module / thư viện':\n\nChương 3 Phân chia module\nTất cả ví dụ cho đến thời điểm này đều được thực thi trong\ncommand line hoặc từ một file python .py Tuy nhiên, đối\nvới các ứng dụng lớn, có nhiều chức năng thì phân chia nhỏ\ndự án thành các file khác nhau sẽ giúp dễ bảo trì và tái sử\ndụng các thành phần đã thiết kế Chương này sẽ giúp bạn thiết kế các tính năng theo mô\nhình các module và khi cần thì sẽ gọi file tương ứng và sử\ndụng 3.1 Các loại module / thư viện\nCó 3 loại module thường thấy là:\n1 Viết bằng Python: có phần mở rộng là .py\n2 Các thư viện liên kết động: có phần mở rộng là .dll ,\n.pyd , .so , .sl ,…\n3 C-Module liên kết với trình phiên dịch Nội dung phần '3.2 Đường dẫn tìm để load module':\n\n3.2 Đường dẫn tìm để load module\nĐể tải một module vào script của bạn, sử dụng cú pháp\nđơn giản:\nimport modulename\nkhi gặp câu lệnh trên thì trình biên dịch sẽ tiến hành tìm\nkiếm file module tương ứng theo thứ tự thư mục sau:\n1 Thư mục hiện hành mà script đang gọi\n2 Các thư mục trong PYTHONPATH (nếu có set)\n3 Các thư mục cài đặt chuẩn trên Linux/Unix Có thể biết được đường dẫn mà một module đã được load\nbằng đoạn code dưới đây: Nội dung phần '3.3 Lấy danh sách thuộc tính và phương thức của một module':\n\nimport math\nmath.__file__\n(Ví dụ trả về '/usr/lib/python2.5/lib-dynload/math so')\n    \nimport random\nrandom.__file__\n(Ví dụ trả về '/usr/lib/python2.5/random.pyc')\n3.3 Lấy danh sách thuộc tính và phương\nthức của một module\nĐể lấy được danh sách các thuộc tính và phương thức mà\nmodule hỗ trợ, sử dụng hàm dir(modulename) Ví dụ: Nội dung phần '3.4 Cách khai báo và sử dụng module':\n\ndir(math)\n['__doc__', '__file__', '__name__', '__package__', \n'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', \n'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degree\ns', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'fa\nctorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma'\n, 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'lo\ng', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians\n', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']\nCó thể gọi hàm dir()  không truyền tham số để lấy các\nthuộc tính và phương thức của scope hiện tại đang thực\nthi 3.4 Cách khai báo và sử dụng module\nGiả sử bạn tạo một file python mymath.py  có nội dung như\nsau:\ndef cong(a, b):\n    return a + b\n    \ndef tru(a, b):\n    return a - b\n    \ndef nhan(a, b):\n    return a * b\nSau đó, tạo một file có tên myexample.py , trong cùng thư\nmục với file mymath.py  vừa tạo ở trên, có nội dung như\nsau:\nimport mymath\n    \nnum1 = 1\nnum2 = 2\n    \nprint 'Tong hai so la: ', mymath.cong(num1, num2)\nVào command line, thực hiện gọi file myexample như sau: Nội dung phần '3.5 Package module':\n\n$ python myexample.py\nSau khi thực hiện sẽ hiển thị lên màn hình là\nTong hai so la: 3\n3.5 Package module\nCó thể gom nhiều module .py  vào một thư mục và tên thư\nmục là tên của package và tạo một file __init__.py  trong\nthư mục này Như vậy, cấu trúc thư của một package sẽ như sau:\n|-- mypack\n|   |-- __init__.py\n|   |-- mymodule1.py\n|   |-- mymodule2.py\n|\nCó thể sử dụng mymodule1  theo cú pháp import sau:\nimport mypack.mymodule1\nhoặc\nimport mypack.mymodule1 as mymodule1\nhoặc\nimport mypack.mymodule1 as mod\nKhi sử dụng một module thuộc một package thì các lệnh\ntrong file __init__.py  sẽ được thực hiện trước Thông\nthường thì file __init__.py  sẽ rỗng Có thể tạo các subpackage bên trong một package theo\nđúng cấu trúc thư mục, có file __init__.py Ví dụ:\nimport mypack.mysubpack.mysubsubpack.module"
      },
      {
        "title": "Chương 4. Class",
        "page": 41,
        "children": [
          {
            "title": "4.1. Khai báo một Class",
            "page": 41,
            "children": [],
            "content": "Nội dung phần '4.1. Khai báo một Class':\n\nChương 4 Class\nLập trình hướng đối tượng là một khái niệm không thể\nthiếu trong hầu hết các ngôn ngữ thông dụng hiện nay Python cũng hỗ trợ lập trình hướng đối tượng với các khái\nniệm Class, Object, Override…\n4.1 Khai báo một Class\nKhai báo một class theo cú pháp sau:\nclass myclass([parentclass]):\n    assignments\n    def __init__(self):\n        statements\n    def method():\n        statements\n    def method2():\n        statements\nVí dụ một class:\nclass animal():\n    name = ''\n    age = 0\n    def __init__(self, name = '', age = 0):\n        self.name = name\n        self.age = age\n    def show(self):\n        print 'My name is ', self.name\n    def run(self):\n        print 'Animal is running...'\n    def go(self):\n        print 'Animal is going...'\n    \n        \nclass dog(animal):\n    def run(self):\n        print 'Dog is running...'\n        \nmyanimal = animal()\nmyanimal.show()\nmyanimal.run()\nmyanimal.go()\n    \nmydog = dog('Lucy')\nmydog.show()\nmydog.run()\nmydog.go()\nSau khi thực thi sẽ cho ra kết quả:\nMy Name is\nAnimal is running.. Animal is going.. My Name is Lucy\nDog is running.. Animal is going.. Trong ví dụ trên thì:\nanimal  và dog  là 2 class Trong đó class dog  kế thừa\ntừ class cha là animal  nên sẽ có các phương thức của\nclass animal name  và age  là thuộc tính (Attribute) của class Phương thức __init__(self)  là hàm tạo của class Hàm này sẽ được gọi mỗi khi có một object mới được\ntạo (từ một class), gọi là quá trình tạo instance show() , run()  và go()  là 2 phương thức của 2 class Khi khai báo phương thức có kèm tham số self  dùng\nđể truy cập ngược lại object đang gọi Lúc gọi phương\nthức thì không cần truyền tham số này Phương thức run()  của class dog  gọi là override\ncủa phương thức run()  của class animal"
          }
        ],
        "content": "Nội dung phần 'Chương 4. Class':\n\nNội dung phần '4.1 Khai báo một Class':\n\nChương 4 Class\nLập trình hướng đối tượng là một khái niệm không thể\nthiếu trong hầu hết các ngôn ngữ thông dụng hiện nay Python cũng hỗ trợ lập trình hướng đối tượng với các khái\nniệm Class, Object, Override…\n4.1 Khai báo một Class\nKhai báo một class theo cú pháp sau:\nclass myclass([parentclass]):\n    assignments\n    def __init__(self):\n        statements\n    def method():\n        statements\n    def method2():\n        statements\nVí dụ một class:\nclass animal():\n    name = ''\n    age = 0\n    def __init__(self, name = '', age = 0):\n        self.name = name\n        self.age = age\n    def show(self):\n        print 'My name is ', self.name\n    def run(self):\n        print 'Animal is running...'\n    def go(self):\n        print 'Animal is going...'\n    \n        \nclass dog(animal):\n    def run(self):\n        print 'Dog is running...'\n        \nmyanimal = animal()\nmyanimal.show()\nmyanimal.run()\nmyanimal.go()\n    \nmydog = dog('Lucy')\nmydog.show()\nmydog.run()\nmydog.go()\nSau khi thực thi sẽ cho ra kết quả:\nMy Name is\nAnimal is running. Animal is going. My Name is Lucy\nDog is running. Animal is going. Trong ví dụ trên thì:\nanimal  và dog  là 2 class Trong đó class dog  kế thừa\ntừ class cha là animal  nên sẽ có các phương thức của\nclass animal name  và age  là thuộc tính (Attribute) của class Phương thức __init__(self)  là hàm tạo của class Hàm này sẽ được gọi mỗi khi có một object mới được\ntạo (từ một class), gọi là quá trình tạo instance show() , run()  và go()  là 2 phương thức của 2 class Khi khai báo phương thức có kèm tham số self  dùng\nđể truy cập ngược lại object đang gọi Lúc gọi phương\nthức thì không cần truyền tham số này Phương thức run()  của class dog  gọi là override\ncủa phương thức run()  của class animal"
      },
      {
        "title": "Chương 5. Thao tác trên tập tin và Thư mục",
        "page": 45,
        "children": [
          {
            "title": "5.1. Tập tin \u0000⠀䘀椀氀攀)",
            "page": 45,
            "children": [
              {
                "title": "5.1.1. Mở file",
                "page": 45,
                "children": [],
                "content": "Nội dung phần '5.1.1. Mở file':\n\nChương 5 Thao tác trên tập tin\nvà Thư mục\nNội dung chương này sẽ hướng dẫn các thao tác liên quan\nđến tập tin và thư mục 5.1 Tập tin (File)\n5.1.1 Mở file\nTrước khi muốn đọc hoặc ghi file, bạn cần có thao tác mở\nfile theo cú pháp:\nfh = open(filepath, mode)\nTrong đó, filepath  là đường dẫn của file sẽ mở và mode\nlà chế độ để mở Có một số chế độ là:\nr : mở để đọc nội dung (mặc định)\nw : mở để ghi nội dung\na : mở để ghi thêm nội dung vào cuối file r+ : mở để đọc và ghi Con trỏ nằm ở đầu file w+ : mở để đọc và ghi Ghi đè nếu file đã tồn tại, nếu\nfile chưa tồn tại thì tạo file mới để ghi a+ : mở để đọc và thêm vào cuối file Con trỏ nằm ở\ncuối file Nếu file chưa tồn tại thì tạo file mới để ghi Mặc định là mở file text, nếu muốn mở file nhị phân\n(binary) thì thêm b , ví dụ: rb , wb , ab , rb+ , wb+ , ab+ Ví dụ:\nf1 = open('test.txt', 'r')\nf2 = open('access_log', 'a+'\nSau khi gọi hàm open()  thành công thì sẽ trả về một\nobject có các thuộc tính:\nclosed : True nếu file đã đóng\nmode : chế độ khi mở file\nname : tên của file\nsoftspace : cờ đánh dấu softspace khi dùng với hàm"
              },
              {
                "title": "5.1.2. Đọc nội dung từ file",
                "page": 47,
                "children": [],
                "content": "Nội dung phần '5.1.2. Đọc nội dung từ file':\n\nprint\n5.1.2 Đọc nội dung từ file\nSau khi file đã mở ở chế độ đọc thì gọi phương thức\nread([count])  để trả về toàn bộ nội dung của file Ví dụ:\nf1 = open('test.txt', 'r')\ndata = f1.read();\nHàm read()  có nhận một tham số là số lượng byte muốn\nđọc Nếu không truyền vào thì sẽ đọc hết nội dung của file Ví dụ:\nf2 = open('log.txt', 'r')\nbuffdata = f2.read(1024)\n5.1.3 Ghi nội dung vào file\nNếu file được mở ở chế độ có thể ghi thì có thể dùng\nphương thức write()  để ghi một nội dung vào file Ví dụ:"
              },
              {
                "title": "5.1.3. Ghi nội dung vào file",
                "page": 47,
                "children": [],
                "content": "Nội dung phần '5.1.3. Ghi nội dung vào file':\n\nprint\n5.1.2 Đọc nội dung từ file\nSau khi file đã mở ở chế độ đọc thì gọi phương thức\nread([count])  để trả về toàn bộ nội dung của file Ví dụ:\nf1 = open('test.txt', 'r')\ndata = f1.read();\nHàm read()  có nhận một tham số là số lượng byte muốn\nđọc Nếu không truyền vào thì sẽ đọc hết nội dung của file Ví dụ:\nf2 = open('log.txt', 'r')\nbuffdata = f2.read(1024)\n5.1.3 Ghi nội dung vào file\nNếu file được mở ở chế độ có thể ghi thì có thể dùng\nphương thức write()  để ghi một nội dung vào file Ví dụ:"
              },
              {
                "title": "5.1.4. Đóng file đã mở",
                "page": 48,
                "children": [],
                "content": "Nội dung phần '5.1.4. Đóng file đã mở':\n\nf2 = open('access_log', 'a+')\nf2.write('Attack detected')\n5.1.4 Đóng file đã mở\nSau khi hoàn tất các thao tác đọc ghi file thì gọi phương\nthức close()  để đóng file đã mở Ví dụ:\nf1.close()\nf2.close()\n5.1.5 Đổi tên file\nSử dụng phương thức os.rename(old, new)  để đổi tên\nmột file Ví dụ:\nimport os\nos.rename('test.txt', 'test_new.txt')\n5.1.6 Xóa file\nSử dụng phương thức os.remove(file)  để xóa một file"
              },
              {
                "title": "5.1.5. Đổi tên file",
                "page": 48,
                "children": [],
                "content": "Nội dung phần '5.1.5. Đổi tên file':\n\nf2 = open('access_log', 'a+')\nf2.write('Attack detected')\n5.1.4 Đóng file đã mở\nSau khi hoàn tất các thao tác đọc ghi file thì gọi phương\nthức close()  để đóng file đã mở Ví dụ:\nf1.close()\nf2.close()\n5.1.5 Đổi tên file\nSử dụng phương thức os.rename(old, new)  để đổi tên\nmột file Ví dụ:\nimport os\nos.rename('test.txt', 'test_new.txt')\n5.1.6 Xóa file\nSử dụng phương thức os.remove(file)  để xóa một file"
              },
              {
                "title": "5.1.6. Xóa file",
                "page": 49,
                "children": [],
                "content": "Nội dung phần '5.1.6. Xóa file':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test')"
              }
            ],
            "content": "Nội dung phần '5.1. Tập tin \u0000⠀䘀椀氀攀)':\n\nNội dung phần '5.1.1 Mở file':\n\nChương 5 Thao tác trên tập tin\nvà Thư mục\nNội dung chương này sẽ hướng dẫn các thao tác liên quan\nđến tập tin và thư mục 5.1 Tập tin (File)\n5.1.1 Mở file\nTrước khi muốn đọc hoặc ghi file, bạn cần có thao tác mở\nfile theo cú pháp:\nfh = open(filepath, mode)\nTrong đó, filepath  là đường dẫn của file sẽ mở và mode\nlà chế độ để mở Có một số chế độ là:\nr : mở để đọc nội dung (mặc định)\nw : mở để ghi nội dung\na : mở để ghi thêm nội dung vào cuối file r+ : mở để đọc và ghi Con trỏ nằm ở đầu file w+ : mở để đọc và ghi Ghi đè nếu file đã tồn tại, nếu\nfile chưa tồn tại thì tạo file mới để ghi a+ : mở để đọc và thêm vào cuối file Con trỏ nằm ở\ncuối file Nếu file chưa tồn tại thì tạo file mới để ghi Mặc định là mở file text, nếu muốn mở file nhị phân\n(binary) thì thêm b , ví dụ: rb , wb , ab , rb+ , wb+ , ab+ Ví dụ:\nf1 = open('test.txt', 'r')\nf2 = open('access_log', 'a+'\nSau khi gọi hàm open()  thành công thì sẽ trả về một\nobject có các thuộc tính:\nclosed : True nếu file đã đóng\nmode : chế độ khi mở file\nname : tên của file\nsoftspace : cờ đánh dấu softspace khi dùng với hàm Nội dung phần '5.1.2 Đọc nội dung từ file':\n\nprint\n5.1.2 Đọc nội dung từ file\nSau khi file đã mở ở chế độ đọc thì gọi phương thức\nread([count])  để trả về toàn bộ nội dung của file Ví dụ:\nf1 = open('test.txt', 'r')\ndata = f1.read();\nHàm read()  có nhận một tham số là số lượng byte muốn\nđọc Nếu không truyền vào thì sẽ đọc hết nội dung của file Ví dụ:\nf2 = open('log.txt', 'r')\nbuffdata = f2.read(1024)\n5.1.3 Ghi nội dung vào file\nNếu file được mở ở chế độ có thể ghi thì có thể dùng\nphương thức write()  để ghi một nội dung vào file Ví dụ: Nội dung phần '5.1.3 Ghi nội dung vào file':\n\nprint\n5.1.2 Đọc nội dung từ file\nSau khi file đã mở ở chế độ đọc thì gọi phương thức\nread([count])  để trả về toàn bộ nội dung của file Ví dụ:\nf1 = open('test.txt', 'r')\ndata = f1.read();\nHàm read()  có nhận một tham số là số lượng byte muốn\nđọc Nếu không truyền vào thì sẽ đọc hết nội dung của file Ví dụ:\nf2 = open('log.txt', 'r')\nbuffdata = f2.read(1024)\n5.1.3 Ghi nội dung vào file\nNếu file được mở ở chế độ có thể ghi thì có thể dùng\nphương thức write()  để ghi một nội dung vào file Ví dụ: Nội dung phần '5.1.4 Đóng file đã mở':\n\nf2 = open('access_log', 'a+')\nf2.write('Attack detected')\n5.1.4 Đóng file đã mở\nSau khi hoàn tất các thao tác đọc ghi file thì gọi phương\nthức close()  để đóng file đã mở Ví dụ:\nf1.close()\nf2.close()\n5.1.5 Đổi tên file\nSử dụng phương thức os.rename(old, new)  để đổi tên\nmột file Ví dụ:\nimport os\nos.rename('test.txt', 'test_new.txt')\n5.1.6 Xóa file\nSử dụng phương thức os.remove(file)  để xóa một file Nội dung phần '5.1.5 Đổi tên file':\n\nf2 = open('access_log', 'a+')\nf2.write('Attack detected')\n5.1.4 Đóng file đã mở\nSau khi hoàn tất các thao tác đọc ghi file thì gọi phương\nthức close()  để đóng file đã mở Ví dụ:\nf1.close()\nf2.close()\n5.1.5 Đổi tên file\nSử dụng phương thức os.rename(old, new)  để đổi tên\nmột file Ví dụ:\nimport os\nos.rename('test.txt', 'test_new.txt')\n5.1.6 Xóa file\nSử dụng phương thức os.remove(file)  để xóa một file Nội dung phần '5.1.6\n\nXóa file':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test')"
          },
          {
            "title": "5.2. Thư mục \u0000⠀䐀椀爀攀挀琀漀爀礀)",
            "page": 49,
            "children": [
              {
                "title": "5.2.1. Tạo thư mục",
                "page": 49,
                "children": [],
                "content": "Nội dung phần '5.2.1. Tạo thư mục':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test')"
              },
              {
                "title": "5.2.2. Xóa thư mục",
                "page": 49,
                "children": [],
                "content": "Nội dung phần '5.2.2. Xóa thư mục':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test')"
              },
              {
                "title": "5.2.3. Đọc nội dung thư mục",
                "page": 50,
                "children": [],
                "content": "Nội dung phần '5.2.3. Đọc nội dung thư mục':\n\n5.2.3 Đọc nội dung thư mục\nSử dụng phương thức os.listdir(dir)  để lấy danh sách\ntập tin, thư mục của thư mục dir Khi gọi sẽ trả về một\nmảng danh sách các tập tin, thư mục Ví dụ:\nimport os\nallfiles = os.listdir('/root/downloads')\nprint allfiles  \n5.3 Module os\nModule os  là một module có nhiều phương thức hữu ích\ntrong việc làm việc với các file và directory, như:\nos.chdir(path) : đổi thư mục hiện hành\nos.getcwd() : trả về thư mục hiện hành\nos.chmod(path, mode) : CHMOD một đường dẫn\nos.chown(path, uid, gid) : CHOWN một đường dẫn\nos.makedirs(path[, mode]) : tạo đường dẫn (có\nrecursive)"
              }
            ],
            "content": "Nội dung phần '5.2. Thư mục \u0000⠀䐀椀爀攀挀琀漀爀礀)':\n\nNội dung phần '5.2.1 Tạo thư mục':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test') Nội dung phần '5.2.2 Xóa thư mục':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test') Nội dung phần '5.2.3 Đọc nội dung thư mục':\n\n5.2.3 Đọc nội dung thư mục\nSử dụng phương thức os.listdir(dir)  để lấy danh sách\ntập tin, thư mục của thư mục dir Khi gọi sẽ trả về một\nmảng danh sách các tập tin, thư mục Ví dụ:\nimport os\nallfiles = os.listdir('/root/downloads')\nprint allfiles  \n5.3 Module os\nModule os  là một module có nhiều phương thức hữu ích\ntrong việc làm việc với các file và directory, như:\nos.chdir(path) : đổi thư mục hiện hành\nos.getcwd() : trả về thư mục hiện hành\nos.chmod(path, mode) : CHMOD một đường dẫn\nos.chown(path, uid, gid) : CHOWN một đường dẫn\nos.makedirs(path[, mode]) : tạo đường dẫn (có\nrecursive)"
          },
          {
            "title": "5.3. Module os",
            "page": 50,
            "children": [],
            "content": "Nội dung phần '5.3. Module os':\n\n5.2.3 Đọc nội dung thư mục\nSử dụng phương thức os.listdir(dir)  để lấy danh sách\ntập tin, thư mục của thư mục dir Khi gọi sẽ trả về một\nmảng danh sách các tập tin, thư mục Ví dụ:\nimport os\nallfiles = os.listdir('/root/downloads')\nprint allfiles  \n5.3 Module os\nModule os  là một module có nhiều phương thức hữu ích\ntrong việc làm việc với các file và directory, như:\nos.chdir(path) : đổi thư mục hiện hành\nos.getcwd() : trả về thư mục hiện hành\nos.chmod(path, mode) : CHMOD một đường dẫn\nos.chown(path, uid, gid) : CHOWN một đường dẫn\nos.makedirs(path[, mode]) : tạo đường dẫn (có\nrecursive)"
          },
          {
            "title": "5.4. Module os.path",
            "page": 51,
            "children": [],
            "content": "Nội dung phần '5.4. Module os.path':\n\nos.removedirs(path) : xóa một đường dẫn (có\nrecursive)\nXem thêm tại https://docs.python.org/2/library/os.html\n5.4 Module os.path\nModule os.path  hỗ trợ các phương thức giúp thao tác\nnhanh chóng và thuận tiện hơn trên đường dẫn os.path.exists(path) : kiểm tra 1 đường dẫn có tồn\ntại hay không\nos.path.getsize(path) : lấy file size (byte)\nos.path.isfile(path) : kiểm tra xem có phải là một\nfile thông thường\nos.path.isdir(path) : kiểm tra xem có phải là một\nthư mục\nos.path.dirname(path) : trả về tên thư mục của path\nos.path.getatime(path) : trả về thời gian truy cập\nmới nhất\nos.path.getmtime(path) : trả về thời gian chỉnh sửa\ncuối cùng\nos.path.getctime(path) : trả về thời gian chỉnh sửa\ncuối của metadata trên một số hệ thống Hoặc trả về\nthời gian tạo file trên Windows Xem thêm tại\nhttps://docs.python.org/2/library/os.path.html"
          }
        ],
        "content": "Nội dung phần 'Chương 5. Thao tác trên tập tin và Thư mục':\n\nNội dung phần '5.1\n\nTập tin \u0000⠀䘀椀氀攀)':\n\nNội dung phần '5.1.1 Mở file':\n\nChương 5 Thao tác trên tập tin\nvà Thư mục\nNội dung chương này sẽ hướng dẫn các thao tác liên quan\nđến tập tin và thư mục 5.1 Tập tin (File)\n5.1.1 Mở file\nTrước khi muốn đọc hoặc ghi file, bạn cần có thao tác mở\nfile theo cú pháp:\nfh = open(filepath, mode)\nTrong đó, filepath  là đường dẫn của file sẽ mở và mode\nlà chế độ để mở Có một số chế độ là:\nr : mở để đọc nội dung (mặc định)\nw : mở để ghi nội dung\na : mở để ghi thêm nội dung vào cuối file r+ : mở để đọc và ghi Con trỏ nằm ở đầu file w+ : mở để đọc và ghi Ghi đè nếu file đã tồn tại, nếu\nfile chưa tồn tại thì tạo file mới để ghi a+ : mở để đọc và thêm vào cuối file Con trỏ nằm ở\ncuối file Nếu file chưa tồn tại thì tạo file mới để ghi Mặc định là mở file text, nếu muốn mở file nhị phân\n(binary) thì thêm b , ví dụ: rb , wb , ab , rb+ , wb+ , ab+ Ví dụ:\nf1 = open('test.txt', 'r')\nf2 = open('access_log', 'a+'\nSau khi gọi hàm open()  thành công thì sẽ trả về một\nobject có các thuộc tính:\nclosed : True nếu file đã đóng\nmode : chế độ khi mở file\nname : tên của file\nsoftspace : cờ đánh dấu softspace khi dùng với hàm Nội dung phần '5.1.2 Đọc nội dung từ file':\n\nprint\n5.1.2 Đọc nội dung từ file\nSau khi file đã mở ở chế độ đọc thì gọi phương thức\nread([count])  để trả về toàn bộ nội dung của file Ví dụ:\nf1 = open('test.txt', 'r')\ndata = f1.read();\nHàm read()  có nhận một tham số là số lượng byte muốn\nđọc Nếu không truyền vào thì sẽ đọc hết nội dung của file Ví dụ:\nf2 = open('log.txt', 'r')\nbuffdata = f2.read(1024)\n5.1.3 Ghi nội dung vào file\nNếu file được mở ở chế độ có thể ghi thì có thể dùng\nphương thức write()  để ghi một nội dung vào file Ví dụ: Nội dung phần '5.1.3 Ghi nội dung vào file':\n\nprint\n5.1.2 Đọc nội dung từ file\nSau khi file đã mở ở chế độ đọc thì gọi phương thức\nread([count])  để trả về toàn bộ nội dung của file Ví dụ:\nf1 = open('test.txt', 'r')\ndata = f1.read();\nHàm read()  có nhận một tham số là số lượng byte muốn\nđọc Nếu không truyền vào thì sẽ đọc hết nội dung của file Ví dụ:\nf2 = open('log.txt', 'r')\nbuffdata = f2.read(1024)\n5.1.3 Ghi nội dung vào file\nNếu file được mở ở chế độ có thể ghi thì có thể dùng\nphương thức write()  để ghi một nội dung vào file Ví dụ: Nội dung phần '5.1.4 Đóng file đã mở':\n\nf2 = open('access_log', 'a+')\nf2.write('Attack detected')\n5.1.4 Đóng file đã mở\nSau khi hoàn tất các thao tác đọc ghi file thì gọi phương\nthức close()  để đóng file đã mở Ví dụ:\nf1.close()\nf2.close()\n5.1.5 Đổi tên file\nSử dụng phương thức os.rename(old, new)  để đổi tên\nmột file Ví dụ:\nimport os\nos.rename('test.txt', 'test_new.txt')\n5.1.6 Xóa file\nSử dụng phương thức os.remove(file)  để xóa một file Nội dung phần '5.1.5 Đổi tên file':\n\nf2 = open('access_log', 'a+')\nf2.write('Attack detected')\n5.1.4 Đóng file đã mở\nSau khi hoàn tất các thao tác đọc ghi file thì gọi phương\nthức close()  để đóng file đã mở Ví dụ:\nf1.close()\nf2.close()\n5.1.5 Đổi tên file\nSử dụng phương thức os.rename(old, new)  để đổi tên\nmột file Ví dụ:\nimport os\nos.rename('test.txt', 'test_new.txt')\n5.1.6 Xóa file\nSử dụng phương thức os.remove(file)  để xóa một file Nội dung phần '5.1.6\n\nXóa file':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test') Nội dung phần '5.2\n\nThư mục \u0000⠀䐀椀爀攀挀琀漀爀礀)':\n\nNội dung phần '5.2.1 Tạo thư mục':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test') Nội dung phần '5.2.2 Xóa thư mục':\n\nkhỏi hệ thống Ví dụ:\nimport os\nos.remove('test.txt')   \n5.2 Thư mục (Directory)\n5.2.1 Tạo thư mục\nSử dụng phương thức os.mkdir(dir)  để tạo thư mục Ví\ndụ:\nimport os\nos.mkdir('test')\n5.2.2 Xóa thư mục\nSử dụng phương thức os.rmdir(dir)  để xóa một thư mục Ví dụ:\nimport os\nos.rmdir('test') Nội dung phần '5.2.3 Đọc nội dung thư mục':\n\n5.2.3 Đọc nội dung thư mục\nSử dụng phương thức os.listdir(dir)  để lấy danh sách\ntập tin, thư mục của thư mục dir Khi gọi sẽ trả về một\nmảng danh sách các tập tin, thư mục Ví dụ:\nimport os\nallfiles = os.listdir('/root/downloads')\nprint allfiles  \n5.3 Module os\nModule os  là một module có nhiều phương thức hữu ích\ntrong việc làm việc với các file và directory, như:\nos.chdir(path) : đổi thư mục hiện hành\nos.getcwd() : trả về thư mục hiện hành\nos.chmod(path, mode) : CHMOD một đường dẫn\nos.chown(path, uid, gid) : CHOWN một đường dẫn\nos.makedirs(path[, mode]) : tạo đường dẫn (có\nrecursive) Nội dung phần '5.3 Module os':\n\n5.2.3 Đọc nội dung thư mục\nSử dụng phương thức os.listdir(dir)  để lấy danh sách\ntập tin, thư mục của thư mục dir Khi gọi sẽ trả về một\nmảng danh sách các tập tin, thư mục Ví dụ:\nimport os\nallfiles = os.listdir('/root/downloads')\nprint allfiles  \n5.3 Module os\nModule os  là một module có nhiều phương thức hữu ích\ntrong việc làm việc với các file và directory, như:\nos.chdir(path) : đổi thư mục hiện hành\nos.getcwd() : trả về thư mục hiện hành\nos.chmod(path, mode) : CHMOD một đường dẫn\nos.chown(path, uid, gid) : CHOWN một đường dẫn\nos.makedirs(path[, mode]) : tạo đường dẫn (có\nrecursive) Nội dung phần '5.4 Module os.path':\n\nos.removedirs(path) : xóa một đường dẫn (có\nrecursive)\nXem thêm tại https://docs.python.org/2/library/os.html\n5.4 Module os.path\nModule os.path  hỗ trợ các phương thức giúp thao tác\nnhanh chóng và thuận tiện hơn trên đường dẫn os.path.exists(path) : kiểm tra 1 đường dẫn có tồn\ntại hay không\nos.path.getsize(path) : lấy file size (byte)\nos.path.isfile(path) : kiểm tra xem có phải là một\nfile thông thường\nos.path.isdir(path) : kiểm tra xem có phải là một\nthư mục\nos.path.dirname(path) : trả về tên thư mục của path\nos.path.getatime(path) : trả về thời gian truy cập\nmới nhất\nos.path.getmtime(path) : trả về thời gian chỉnh sửa\ncuối cùng\nos.path.getctime(path) : trả về thời gian chỉnh sửa\ncuối của metadata trên một số hệ thống Hoặc trả về\nthời gian tạo file trên Windows Xem thêm tại\nhttps://docs.python.org/2/library/os.path.html"
      },
      {
        "title": "Chương 6. Xử lý hình ảnh",
        "page": 53,
        "children": [
          {
            "title": "6.1. Cài đặt PIL",
            "page": 53,
            "children": [],
            "content": "Nội dung phần '6.1. Cài đặt PIL':\n\nChương 6 Xử lý hình ảnh\nSử dụng thư viện Pillow (PIL Fork) để tiến hành các thao\ntác xử lý hình ảnh đơn giản như resize, crop, rotate…\n6.1 Cài đặt PIL\nVào trang web sau để download / cài đặt package PIL cho\npython của bạn\nhttp://pillow.readthedocs.org/en/latest/installation.html\nSau khi cài đặt thì có thể sử dụng các module trong\npackage IPL\nfrom PIL import Image\n6.2 Mở file\nfrom PIL import Image\nim = Image.open(\"photo.jpg\")"
          },
          {
            "title": "6.2. Mở file",
            "page": 53,
            "children": [],
            "content": "Nội dung phần '6.2. Mở file':\n\nChương 6 Xử lý hình ảnh\nSử dụng thư viện Pillow (PIL Fork) để tiến hành các thao\ntác xử lý hình ảnh đơn giản như resize, crop, rotate…\n6.1 Cài đặt PIL\nVào trang web sau để download / cài đặt package PIL cho\npython của bạn\nhttp://pillow.readthedocs.org/en/latest/installation.html\nSau khi cài đặt thì có thể sử dụng các module trong\npackage IPL\nfrom PIL import Image\n6.2 Mở file\nfrom PIL import Image\nim = Image.open(\"photo.jpg\")"
          },
          {
            "title": "6.3. Ghi file",
            "page": 54,
            "children": [],
            "content": "Nội dung phần '6.3. Ghi file':\n\nSau khi mở file hình thành công thì có thể thao tác trên đối\ntượng im 6.3 Ghi file\nTừ đối tượng Image  có thể lưu file xuống máy tính bằng\nphương thức save(path, type) Ví dụ:\n.. im.save('photo_new.jpg', 'JPEG')\n6.4 Tạo thumbnail\nSử dụng phương thức thumbnail  như sau:\nfrom PIL import Image\nim = Image.open('photo.jpg')\nim.thumbnail((100, 100))\nim.save('photo_thumbnail.jpg', 'JPEG')\nthumbnail  không trả về image mới mà thực hiện trên\nobject image đang gọi"
          },
          {
            "title": "6.4. Tạo thumbnail",
            "page": 54,
            "children": [],
            "content": "Nội dung phần '6.4. Tạo thumbnail':\n\nSau khi mở file hình thành công thì có thể thao tác trên đối\ntượng im 6.3 Ghi file\nTừ đối tượng Image  có thể lưu file xuống máy tính bằng\nphương thức save(path, type) Ví dụ:\n.. im.save('photo_new.jpg', 'JPEG')\n6.4 Tạo thumbnail\nSử dụng phương thức thumbnail  như sau:\nfrom PIL import Image\nim = Image.open('photo.jpg')\nim.thumbnail((100, 100))\nim.save('photo_thumbnail.jpg', 'JPEG')\nthumbnail  không trả về image mới mà thực hiện trên\nobject image đang gọi"
          },
          {
            "title": "6.5. Các thao tác xử lý hình ảnh",
            "page": 55,
            "children": [],
            "content": "Nội dung phần '6.5. Các thao tác xử lý hình ảnh':\n\n6.5 Các thao tác xử lý hình ảnh\nTham khảo thêm thư viện PIL tại:\nhttp://pillow.readthedocs.org/en/latest/index.html"
          }
        ],
        "content": "Nội dung phần 'Chương 6. Xử lý hình ảnh':\n\nNội dung phần '6.1 Cài đặt PIL':\n\nChương 6 Xử lý hình ảnh\nSử dụng thư viện Pillow (PIL Fork) để tiến hành các thao\ntác xử lý hình ảnh đơn giản như resize, crop, rotate…\n6.1 Cài đặt PIL\nVào trang web sau để download / cài đặt package PIL cho\npython của bạn\nhttp://pillow.readthedocs.org/en/latest/installation.html\nSau khi cài đặt thì có thể sử dụng các module trong\npackage IPL\nfrom PIL import Image\n6.2 Mở file\nfrom PIL import Image\nim = Image.open(\"photo.jpg\") Nội dung phần '6.2 Mở file':\n\nChương 6 Xử lý hình ảnh\nSử dụng thư viện Pillow (PIL Fork) để tiến hành các thao\ntác xử lý hình ảnh đơn giản như resize, crop, rotate…\n6.1 Cài đặt PIL\nVào trang web sau để download / cài đặt package PIL cho\npython của bạn\nhttp://pillow.readthedocs.org/en/latest/installation.html\nSau khi cài đặt thì có thể sử dụng các module trong\npackage IPL\nfrom PIL import Image\n6.2 Mở file\nfrom PIL import Image\nim = Image.open(\"photo.jpg\") Nội dung phần '6.3 Ghi file':\n\nSau khi mở file hình thành công thì có thể thao tác trên đối\ntượng im 6.3 Ghi file\nTừ đối tượng Image  có thể lưu file xuống máy tính bằng\nphương thức save(path, type) Ví dụ:\n. im.save('photo_new.jpg', 'JPEG')\n6.4 Tạo thumbnail\nSử dụng phương thức thumbnail  như sau:\nfrom PIL import Image\nim = Image.open('photo.jpg')\nim.thumbnail((100, 100))\nim.save('photo_thumbnail.jpg', 'JPEG')\nthumbnail  không trả về image mới mà thực hiện trên\nobject image đang gọi Nội dung phần '6.4 Tạo thumbnail':\n\nSau khi mở file hình thành công thì có thể thao tác trên đối\ntượng im 6.3 Ghi file\nTừ đối tượng Image  có thể lưu file xuống máy tính bằng\nphương thức save(path, type) Ví dụ:\n. im.save('photo_new.jpg', 'JPEG')\n6.4 Tạo thumbnail\nSử dụng phương thức thumbnail  như sau:\nfrom PIL import Image\nim = Image.open('photo.jpg')\nim.thumbnail((100, 100))\nim.save('photo_thumbnail.jpg', 'JPEG')\nthumbnail  không trả về image mới mà thực hiện trên\nobject image đang gọi Nội dung phần '6.5 Các thao tác xử lý hình ảnh':\n\n6.5 Các thao tác xử lý hình ảnh\nTham khảo thêm thư viện PIL tại:\nhttp://pillow.readthedocs.org/en/latest/index.html"
      },
      {
        "title": "Chương 7. Xử lý file JSON",
        "page": 56,
        "children": [
          {
            "title": "7.1. Load file từ Internet",
            "page": 56,
            "children": [],
            "content": "Nội dung phần '7.1. Load file từ Internet':\n\nChương 7 Xử lý file JSON\nJSON là một trong những định dạng file trao đổi dữ liệu\nthông dụng nhất hiện nay Với kiến trúc đơn giản và tương\nđồng với cấu trúc của Python nên việc thao tác JSON trên\nPython rất dễ hiểu 7.1 Load file từ Internet\nThông thường dữ liệu JSON được lấy từ nguồn khác (như\nfile, internet..) nên chương này sẽ bắt đầu bằng cách\nhướng dẫn download một file JSON từ Internet và sau đó\nmới parsing nội dung JSON download Sử dụng module urllib2  để download file và module\njson  để encode/decode JSON data Ví dụ:"
          },
          {
            "title": "7.2. Parsing JSON Data",
            "page": 57,
            "children": [],
            "content": "Nội dung phần '7.2. Parsing JSON Data':\n\nimport urllib2\nimport json\n    \nresponse = urllib2.urlopen('https://api.github.com/\nusers/voduytuan/repos')\n    \ndata = json.load(response)\n    \nprint data\nVí dụ trên sẽ truy vấn đường dẫn\nhttps://api.github.com/users/voduytuan/repos để lấy danh\nsách Repository trên Github của mình dưới định dạng\nJSON Sau đó, sẽ được\n7.2 Parsing JSON Data\nNếu như bạn đã có JSON data dưới dạng chuỗi, muốn\nparsing chuỗi này thành Data thì sử dụng như cách dưới\nđây:"
          },
          {
            "title": "7.3. Encoding JSON Data",
            "page": 58,
            "children": [],
            "content": "Nội dung phần '7.3. Encoding JSON Data':\n\nimport json\nmystring = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'\ndata = json.loads(mystring)\nprint data\n(Hiển thị: {u'a': 1, u'c': 3, u'b': 2, u'e': 5, u'd\n': 4})\n7.3 Encoding JSON Data\nNếu như bạn đã có một biến và muốn encode thành JSON\nstring thì có thể dùng theo cách sau:\nimport json\n    \nmydata = {\n    'name': 'John',\n    'age': 10\n}\njsonstring = json.dumps(mydata)\nprint jsonstring    \n(hiển thị: {\"age\": 10, \"name\": \"John\"})"
          }
        ],
        "content": "Nội dung phần 'Chương 7. Xử lý file JSON':\n\nNội dung phần '7.1 Load file từ Internet':\n\nChương 7 Xử lý file JSON\nJSON là một trong những định dạng file trao đổi dữ liệu\nthông dụng nhất hiện nay Với kiến trúc đơn giản và tương\nđồng với cấu trúc của Python nên việc thao tác JSON trên\nPython rất dễ hiểu 7.1 Load file từ Internet\nThông thường dữ liệu JSON được lấy từ nguồn khác (như\nfile, internet..) nên chương này sẽ bắt đầu bằng cách\nhướng dẫn download một file JSON từ Internet và sau đó\nmới parsing nội dung JSON download Sử dụng module urllib2  để download file và module\njson  để encode/decode JSON data Ví dụ: Nội dung phần '7.2 Parsing JSON Data':\n\nimport urllib2\nimport json\n    \nresponse = urllib2.urlopen('https://api.github.com/\nusers/voduytuan/repos')\n    \ndata = json.load(response)\n    \nprint data\nVí dụ trên sẽ truy vấn đường dẫn\nhttps://api.github.com/users/voduytuan/repos để lấy danh\nsách Repository trên Github của mình dưới định dạng\nJSON Sau đó, sẽ được\n7.2 Parsing JSON Data\nNếu như bạn đã có JSON data dưới dạng chuỗi, muốn\nparsing chuỗi này thành Data thì sử dụng như cách dưới\nđây: Nội dung phần '7.3 Encoding JSON Data':\n\nimport json\nmystring = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'\ndata = json.loads(mystring)\nprint data\n(Hiển thị: {u'a': 1, u'c': 3, u'b': 2, u'e': 5, u'd\n': 4})\n7.3 Encoding JSON Data\nNếu như bạn đã có một biến và muốn encode thành JSON\nstring thì có thể dùng theo cách sau:\nimport json\n    \nmydata = {\n    'name': 'John',\n    'age': 10\n}\njsonstring = json.dumps(mydata)\nprint jsonstring    \n(hiển thị: {\"age\": 10, \"name\": \"John\"})"
      },
      {
        "title": "Chương 8. Xử lý file XML",
        "page": 59,
        "children": [
          {
            "title": "8.1. Cài đặt Beautifulsoup",
            "page": 59,
            "children": [],
            "content": "Nội dung phần '8.1. Cài đặt Beautifulsoup':\n\nChương 8 Xử lý file XML\nTrong phần này, chúng ta sẽ parsing nội dung XML thành\ndữ liệu để xử lý Để xử lý XML, ta sẽ sử dụng thư viện\nBeautifulsoup 4 Đây là một thư viện giúp việc triển khai\nviệc parsing html, xml được nhanh chóng và tiện lợi 8.1 Cài đặt Beautifulsoup\nBạn có thể tham khảo hướng dẫn cách cài đặt tại website\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc\nbeautiful-soup Trên MacOS, có thể cài bằng pip  như sau:\n$ sudo pip install beautifulsoup4\n8.2 Cài đặt lxml parser\nĐể parsing xml  từ beautifulsoup, tao sử dụng bộ parser\nxml có tên là lxml Xem hướng dẫn cài đặt tại"
          },
          {
            "title": "8.2. Cài đặt lxml parser",
            "page": 60,
            "children": [],
            "content": "Nội dung phần '8.2. Cài đặt lxml parser':\n\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc\na-parser\nTrên MacOS, có thể cài bằng pip  như sau:\nsudo pip install lxml\n8.3 Ví dụ về parsing XML\nCho ví dụ sau:\nfrom bs4 import BeautifulSoup as Soup\nnote = '''\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<breakfast_menu>\n    <food>\n        <name>Belgian Waffles</name>\n        <price>$5.95</price>\n        <description>Two of our famous Belgian Waff\nles with plenty of real maple syrup</description>\n        <calories>650</calories>\n    </food>\n    <food>\n<name>Strawberry Belgian Waffles</name>"
          },
          {
            "title": "8.3. Ví dụ về parsing XML",
            "page": 60,
            "children": [],
            "content": "Nội dung phần '8.3. Ví dụ về parsing XML':\n\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc\na-parser\nTrên MacOS, có thể cài bằng pip  như sau:\nsudo pip install lxml\n8.3 Ví dụ về parsing XML\nCho ví dụ sau:\nfrom bs4 import BeautifulSoup as Soup\nnote = '''\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<breakfast_menu>\n    <food>\n        <name>Belgian Waffles</name>\n        <price>$5.95</price>\n        <description>Two of our famous Belgian Waff\nles with plenty of real maple syrup</description>\n        <calories>650</calories>\n    </food>\n    <food>\n<name>Strawberry Belgian Waffles</name>\na e St awbe\ny\ne g a\na\nes / a e\n        <price>$7.95</price>\n        <description>Light Belgian waffles covered \nwith strawberries and whipped cream</description>\n        <calories>900</calories>\n    </food>\n</breakfast_menu>\n'''\n    \nsoup = Soup(note, 'xml')\n    \nfoods = soup.findAll('food')\n    \nfor x in foods:\n    print x.find('name').string, ': ', x.price.stri\nng\nKhi chạy thì sẽ hiển thị ra màn hình như sau:\nBelgian Waffles :  $5.95\nStrawberry Belgian Waffles :  $7.95    \nĐối tượng thuộc class Soup  (BeautifulSoup) sẽ giúp truy\nxuất các thành phần của file xml nhanh chóng và tiện lợi"
          },
          {
            "title": "8.4. Parsing HTML",
            "page": 62,
            "children": [],
            "content": "Nội dung phần '8.4. Parsing HTML':\n\nTrong ví dụ có một số cách truy xuất đến các phần tử như:\nfindAll() : trả về mảng các thẻ có tên cần tìm\nfind() : trả về phần tử đầu tiên có tên cần tìm\nTruy xuất trực tiếp thông qua tên thẻ như\nx.price.string\n8.4 Parsing HTML\nTương tự như xml , BeautifulSoup có thể parsing nội dung\nHTML thông qua hàm khởi tạo và chọn html  ở tham số\nthứ 2 .. soup = Soup(websitehtml, 'html')"
          }
        ],
        "content": "Nội dung phần 'Chương 8. Xử lý file XML':\n\nNội dung phần '8.1 Cài đặt Beautifulsoup':\n\nChương 8 Xử lý file XML\nTrong phần này, chúng ta sẽ parsing nội dung XML thành\ndữ liệu để xử lý Để xử lý XML, ta sẽ sử dụng thư viện\nBeautifulsoup 4 Đây là một thư viện giúp việc triển khai\nviệc parsing html, xml được nhanh chóng và tiện lợi 8.1 Cài đặt Beautifulsoup\nBạn có thể tham khảo hướng dẫn cách cài đặt tại website\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc\nbeautiful-soup Trên MacOS, có thể cài bằng pip  như sau:\n$ sudo pip install beautifulsoup4\n8.2 Cài đặt lxml parser\nĐể parsing xml  từ beautifulsoup, tao sử dụng bộ parser\nxml có tên là lxml Xem hướng dẫn cài đặt tại Nội dung phần '8.2 Cài đặt lxml parser':\n\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc\na-parser\nTrên MacOS, có thể cài bằng pip  như sau:\nsudo pip install lxml\n8.3 Ví dụ về parsing XML\nCho ví dụ sau:\nfrom bs4 import BeautifulSoup as Soup\nnote = '''\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<breakfast_menu>\n    <food>\n        <name>Belgian Waffles</name>\n        <price>$5.95</price>\n        <description>Two of our famous Belgian Waff\nles with plenty of real maple syrup</description>\n        <calories>650</calories>\n    </food>\n    <food>\n<name>Strawberry Belgian Waffles</name> Nội dung phần '8.3 Ví dụ về parsing XML':\n\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc\na-parser\nTrên MacOS, có thể cài bằng pip  như sau:\nsudo pip install lxml\n8.3 Ví dụ về parsing XML\nCho ví dụ sau:\nfrom bs4 import BeautifulSoup as Soup\nnote = '''\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<breakfast_menu>\n    <food>\n        <name>Belgian Waffles</name>\n        <price>$5.95</price>\n        <description>Two of our famous Belgian Waff\nles with plenty of real maple syrup</description>\n        <calories>650</calories>\n    </food>\n    <food>\n<name>Strawberry Belgian Waffles</name>\na e St awbe\ny\ne g a\na\nes / a e\n        <price>$7.95</price>\n        <description>Light Belgian waffles covered \nwith strawberries and whipped cream</description>\n        <calories>900</calories>\n    </food>\n</breakfast_menu>\n'''\n    \nsoup = Soup(note, 'xml')\n    \nfoods = soup.findAll('food')\n    \nfor x in foods:\n    print x.find('name').string, ': ', x.price.stri\nng\nKhi chạy thì sẽ hiển thị ra màn hình như sau:\nBelgian Waffles :  $5.95\nStrawberry Belgian Waffles :  $7.95    \nĐối tượng thuộc class Soup  (BeautifulSoup) sẽ giúp truy\nxuất các thành phần của file xml nhanh chóng và tiện lợi Nội dung phần '8.4 Parsing HTML':\n\nTrong ví dụ có một số cách truy xuất đến các phần tử như:\nfindAll() : trả về mảng các thẻ có tên cần tìm\nfind() : trả về phần tử đầu tiên có tên cần tìm\nTruy xuất trực tiếp thông qua tên thẻ như\nx.price.string\n8.4 Parsing HTML\nTương tự như xml , BeautifulSoup có thể parsing nội dung\nHTML thông qua hàm khởi tạo và chọn html  ở tham số\nthứ 2 . soup = Soup(websitehtml, 'html')"
      },
      {
        "title": "Chương 9. Kết nối MySQL",
        "page": 63,
        "children": [
          {
            "title": "9.1. Cài đặt MySQLdb",
            "page": 63,
            "children": [],
            "content": "Nội dung phần '9.1. Cài đặt MySQLdb':\n\nChương 9 Kết nối MySQL\nMySQL là một hệ cơ sở dữ liệu quan hệ phổ biến nhất hiện\nnay Rất nhiều ngôn ngữ có thể kết nối đến MySQL và\nPython cũng không ngoại lệ Mặc định Python không có thư viện để kết nối đến MySQL\nserver Trong phần này, để kết nối đến MySQL Server từ\nPython, chúng ta sẽ sử dụng module MySQLdb\n9.1 Cài đặt MySQLdb\nCài đặt thông qua pip  như sau:\n$ sudo pip install MySQL-python\nTham khảo thêm tại: https://pypi.python.org/pypi/MySQL-\npython/1.2.5\nKhai báo module MySQLdb là có thể sử dụng"
          },
          {
            "title": "9.2. Kết nối đến MySQL Server",
            "page": 64,
            "children": [],
            "content": "Nội dung phần '9.2. Kết nối đến MySQL Server':\n\nimport MySQLdb\nTrong một số trường hợp đã cài MySQLdb nhưng import\nbáo lỗi thiếu file libmysqlclient.18.dylib Nguyên nhân\ncó thể là do hiện tại đường dẫn đến file không tồn tại Thử\ntạo symlink hoặc sử dụng câu lệnh sau để tạo symlink từ\nfile libmysqlclient.18.dylib  đến thư mục /usr/lib/\n$ sudo ln -s /usr/local/mysql/lib/libmysqlclient.18\n.dylib /usr/lib/libmysqlclient.18.dylib\n9.2 Kết nối đến MySQL Server\nBạn cần có một MySQL server đang chạy và cho kết nối\nđến Trong trường hợp này là localhost nên không cần cấu\nhình đặc biệt, chỉ cần cung cấp username và password là\ncó thể kết nối đến MySQL Server Thực hiện gọi hàm như sau để trả về kết nối:\nimport MySQLdb\n    \ndbcon = MySQLdb.connect(host = 'localhost', user = \n'myusername', passwd = 'mypassword', db = 'mydbname\n')\nNếu kết nối không thành công thì sẽ báo lỗi và ngưng\nchương trình Cách kết nối an toàn là đưa vào trong try\nđể bắt lỗi như sau:"
          },
          {
            "title": "9.3. Kết nối với charset utf8",
            "page": 66,
            "children": [],
            "content": "Nội dung phần '9.3. Kết nối với charset utf8':\n\nimport MySQLdb\n    \ndb = None\n    \ntry:\n    db = MySQLdb.connect(host = 'localhost', user =\n 'root', passwd = 'root', db = 'mysql')\n    \nexcept MySQLdb.Error, e:\n    print \"Error %d: %s\" % (e.args[0],e.args[1])\n    sys.exit(1)\n    \nif db:\n    cur = db.cursor()\n    cur.execute(\"SELECT VERSION()\")\n    ver = cur.fetchone()\n    print \"Database version : %s \" % ver\n9.3 Kết nối với charset utf8\nMặc định kết nối đến MySQL server là charset latin  nên\nkhi lấy dữ liệu unicode thì hiển thị Tiếng Việt không đúng,\nbạn cần phải chọn charset là utf8  khi tạo kết nối Cú pháp\nnhư sau:"
          },
          {
            "title": "9.4. Query dữ liệu",
            "page": 67,
            "children": [],
            "content": "Nội dung phần '9.4. Query dữ liệu':\n\n.. db = MySQLdb.connect(host = 'localhost', user = 'ro\not', passwd = 'root', db = 'test', charset = 'utf8'\n)\n9.4 Query dữ liệu\nĐể truy vấn dữ liệu (chạy câu lệnh SQL) thì sử dụng cursor\ncủa MySQLdb Ví dụ:\nimport MySQLdb\n    \ndb = MySQLdb.connect(host = 'localhost', user = 'ro\not', passwd = 'root', db = 'mysql');\ncursor = db.cursor()\nsql = 'SELECT * FROM user'\ncursor.execute(sql)\nmyusers = cursor.fetchall()\nVí dụ dữ liệu biến myusers  là: ((1, 'John'), (2, 'Doe'))\nMặc định, cursor  sẽ trả về mỗi dòng dữ liệu từ MySQL\ntheo kiểu tuple , tức là không có key Nếu bạn muốn trả về"
          },
          {
            "title": "9.5. Fetch dữ liệu",
            "page": 68,
            "children": [],
            "content": "Nội dung phần '9.5. Fetch dữ liệu':\n\nkiểu Dictionary  thì có thể khai báo:\nimport MySQLdb\ndb = MySQLdb.connect(host = 'localhost', user = 'ro\not', passwd = 'root', db = 'mysql')\ncursor = db.cursor(MySQLdb.cursors.DictCursor)\n.. 9.5 Fetch dữ liệu\nCó một số cách để fetch dữ liệu thông dụng từ cursor  sau\nkhi đã exectute(sql)  là fetchone()  và fetchall() fetchone() : chỉ fetch một dòng dữ liệu Nếu muốn\nfetch nhiều dòng dữ liệu thì có thể gọi nhiều lần, mỗi\nlần sẽ trả về một dòng dữ liệu Tốt cho trường hợp truy\nvấn rất nhiều dữ liệu một lúc Nếu trả về None  tức là\nđã fetch hết dữ liệu từ câu truy vấn fetchall() : fetch toàn bộ dữ liệu truy vấn được từ\ncâu truy vấn và trả về một tuple chứa các dòng dữ"
          },
          {
            "title": "9.6. Đóng kết nối",
            "page": 69,
            "children": [],
            "content": "Nội dung phần '9.6. Đóng kết nối':\n\nliệu Mỗi phần tử của Tuple có thể là một Tuple khác\nhoặc là một Dictionary tùy theo cài đặt ở bước lấy\ncursor (Xem phần 9.4) fetchmany(size) : nằm ở giữa 2 kiểu fetch trên, có thể\nquy định số lượng row trong mỗi lần fetch Nếu fetch\nhết thì trả về Tuple rỗng 9.6 Đóng kết nối\nSau khi kết nối và truy vấn thì có thể đóng kết nối theo ví\ndụ sau:\nimport MySQLdb\ndb = MySQLdb.connect(...)\ndb.close()\nNgoài ra, bạn cũng nên đóng cursor  khi không còn sử\ndụng theo ví dụ:"
          },
          {
            "title": "9.7. Prepared Statement",
            "page": 70,
            "children": [],
            "content": "Nội dung phần '9.7. Prepared Statement':\n\nimport MySQLdb\n    \ndb = MySQLdb.connect(...)\ncursor = db.cursor()\ncursor.close()\ndb.close()\n9.7 Prepared Statement\nPrepared statement là kỹ thuật tham số hóa các dữ liệu\ntruyền vào câu truy vấn thay vì nối chuỗi trực tiếp để xây\ndựng một chuỗi truy vấn dài Kỹ thuật này được áp dụng\nnhiều và giúp tăng hiệu quả và tính bảo mật của câu truy\nvấn Ví dụ:\n.. cur.execute(\"UPDATE Writers SET Name = %s WHERE Id \n= %s\", (\"John\", \"4\")) \n.. Mỗi tham số truy vấn sẽ được thay thế bằng %s  và phương\nthức execute()  sẽ có tham số thứ 2 là một Tuple có giá trị\ntương ứng với thứ tự xuất hiện của các thành phần %s"
          }
        ],
        "content": "Nội dung phần 'Chương 9. Kết nối MySQL':\n\nNội dung phần '9.1 Cài đặt MySQLdb':\n\nChương 9 Kết nối MySQL\nMySQL là một hệ cơ sở dữ liệu quan hệ phổ biến nhất hiện\nnay Rất nhiều ngôn ngữ có thể kết nối đến MySQL và\nPython cũng không ngoại lệ Mặc định Python không có thư viện để kết nối đến MySQL\nserver Trong phần này, để kết nối đến MySQL Server từ\nPython, chúng ta sẽ sử dụng module MySQLdb\n9.1 Cài đặt MySQLdb\nCài đặt thông qua pip  như sau:\n$ sudo pip install MySQL-python\nTham khảo thêm tại: https://pypi.python.org/pypi/MySQL-\npython/1.2.5\nKhai báo module MySQLdb là có thể sử dụng Nội dung phần '9.2 Kết nối đến MySQL Server':\n\nimport MySQLdb\nTrong một số trường hợp đã cài MySQLdb nhưng import\nbáo lỗi thiếu file libmysqlclient.18.dylib Nguyên nhân\ncó thể là do hiện tại đường dẫn đến file không tồn tại Thử\ntạo symlink hoặc sử dụng câu lệnh sau để tạo symlink từ\nfile libmysqlclient.18.dylib  đến thư mục /usr/lib/\n$ sudo ln -s /usr/local/mysql/lib/libmysqlclient.18\n.dylib /usr/lib/libmysqlclient.18.dylib\n9.2 Kết nối đến MySQL Server\nBạn cần có một MySQL server đang chạy và cho kết nối\nđến Trong trường hợp này là localhost nên không cần cấu\nhình đặc biệt, chỉ cần cung cấp username và password là\ncó thể kết nối đến MySQL Server Thực hiện gọi hàm như sau để trả về kết nối:\nimport MySQLdb\n    \ndbcon = MySQLdb.connect(host = 'localhost', user = \n'myusername', passwd = 'mypassword', db = 'mydbname\n')\nNếu kết nối không thành công thì sẽ báo lỗi và ngưng\nchương trình Cách kết nối an toàn là đưa vào trong try\nđể bắt lỗi như sau: Nội dung phần '9.3 Kết nối với charset utf8':\n\nimport MySQLdb\n    \ndb = None\n    \ntry:\n    db = MySQLdb.connect(host = 'localhost', user =\n 'root', passwd = 'root', db = 'mysql')\n    \nexcept MySQLdb.Error, e:\n    print \"Error %d: %s\" % (e.args[0],e.args[1])\n    sys.exit(1)\n    \nif db:\n    cur = db.cursor()\n    cur.execute(\"SELECT VERSION()\")\n    ver = cur.fetchone()\n    print \"Database version : %s \" % ver\n9.3 Kết nối với charset utf8\nMặc định kết nối đến MySQL server là charset latin  nên\nkhi lấy dữ liệu unicode thì hiển thị Tiếng Việt không đúng,\nbạn cần phải chọn charset là utf8  khi tạo kết nối Cú pháp\nnhư sau: Nội dung phần '9.4 Query dữ liệu':\n\n. db = MySQLdb.connect(host = 'localhost', user = 'ro\not', passwd = 'root', db = 'test', charset = 'utf8'\n)\n9.4 Query dữ liệu\nĐể truy vấn dữ liệu (chạy câu lệnh SQL) thì sử dụng cursor\ncủa MySQLdb Ví dụ:\nimport MySQLdb\n    \ndb = MySQLdb.connect(host = 'localhost', user = 'ro\not', passwd = 'root', db = 'mysql');\ncursor = db.cursor()\nsql = 'SELECT * FROM user'\ncursor.execute(sql)\nmyusers = cursor.fetchall()\nVí dụ dữ liệu biến myusers  là: ((1, 'John'), (2, 'Doe'))\nMặc định, cursor  sẽ trả về mỗi dòng dữ liệu từ MySQL\ntheo kiểu tuple , tức là không có key Nếu bạn muốn trả về Nội dung phần '9.5 Fetch dữ liệu':\n\nkiểu Dictionary  thì có thể khai báo:\nimport MySQLdb\ndb = MySQLdb.connect(host = 'localhost', user = 'ro\not', passwd = 'root', db = 'mysql')\ncursor = db.cursor(MySQLdb.cursors.DictCursor)\n. 9.5 Fetch dữ liệu\nCó một số cách để fetch dữ liệu thông dụng từ cursor  sau\nkhi đã exectute(sql)  là fetchone()  và fetchall() fetchone() : chỉ fetch một dòng dữ liệu Nếu muốn\nfetch nhiều dòng dữ liệu thì có thể gọi nhiều lần, mỗi\nlần sẽ trả về một dòng dữ liệu Tốt cho trường hợp truy\nvấn rất nhiều dữ liệu một lúc Nếu trả về None  tức là\nđã fetch hết dữ liệu từ câu truy vấn fetchall() : fetch toàn bộ dữ liệu truy vấn được từ\ncâu truy vấn và trả về một tuple chứa các dòng dữ Nội dung phần '9.6\n\nĐóng kết nối':\n\nliệu Mỗi phần tử của Tuple có thể là một Tuple khác\nhoặc là một Dictionary tùy theo cài đặt ở bước lấy\ncursor (Xem phần 9.4) fetchmany(size) : nằm ở giữa 2 kiểu fetch trên, có thể\nquy định số lượng row trong mỗi lần fetch Nếu fetch\nhết thì trả về Tuple rỗng 9.6 Đóng kết nối\nSau khi kết nối và truy vấn thì có thể đóng kết nối theo ví\ndụ sau:\nimport MySQLdb\ndb = MySQLdb.connect(...)\ndb.close()\nNgoài ra, bạn cũng nên đóng cursor  khi không còn sử\ndụng theo ví dụ: Nội dung phần '9.7 Prepared Statement':\n\nimport MySQLdb\n    \ndb = MySQLdb.connect(...)\ncursor = db.cursor()\ncursor.close()\ndb.close()\n9.7 Prepared Statement\nPrepared statement là kỹ thuật tham số hóa các dữ liệu\ntruyền vào câu truy vấn thay vì nối chuỗi trực tiếp để xây\ndựng một chuỗi truy vấn dài Kỹ thuật này được áp dụng\nnhiều và giúp tăng hiệu quả và tính bảo mật của câu truy\nvấn Ví dụ:\n. cur.execute(\"UPDATE Writers SET Name = %s WHERE Id \n= %s\", (\"John\", \"4\")) \n. Mỗi tham số truy vấn sẽ được thay thế bằng %s  và phương\nthức execute()  sẽ có tham số thứ 2 là một Tuple có giá trị\ntương ứng với thứ tự xuất hiện của các thành phần %s"
      },
      {
        "title": "Chương 10. Kết nối Redis",
        "page": 72,
        "children": [
          {
            "title": "10.1. Cài đặt",
            "page": 72,
            "children": [],
            "content": "Nội dung phần '10.1. Cài đặt':\n\nChương 10 Kết nối Redis\nRedis là một memory cache server hỗ trợ persistant data\nthông dụng nhất hiện nay Nội dung chương này sẽ hướng\ndẫn bạn kết nối đến một Redis server (đã được cài đặt\nsẵn) thông qua thư viện redis-py 10.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttps://github.com/andymccurdy/redis-py\nĐơn giản cài thông qua pip  là:\n$ sudo pip install redis\n10.2 Kết nối đến Redis\nĐể kết nối đến Redis server thì bạn có thể xem ví dụ sau:"
          },
          {
            "title": "10.2 Kết nối đến Redis",
            "page": 72,
            "children": [],
            "content": "Nội dung phần '10.2 Kết nối đến Redis':\n\nChương 10 Kết nối Redis\nRedis là một memory cache server hỗ trợ persistant data\nthông dụng nhất hiện nay Nội dung chương này sẽ hướng\ndẫn bạn kết nối đến một Redis server (đã được cài đặt\nsẵn) thông qua thư viện redis-py 10.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttps://github.com/andymccurdy/redis-py\nĐơn giản cài thông qua pip  là:\n$ sudo pip install redis\n10.2 Kết nối đến Redis\nĐể kết nối đến Redis server thì bạn có thể xem ví dụ sau:"
          },
          {
            "title": "10.3. Thực hiện lệnh",
            "page": 73,
            "children": [],
            "content": "Nội dung phần '10.3. Thực hiện lệnh':\n\nimport redis\nr = redis.StrictRedis(host='localhost', port=6379, \ndb=0)\n10.3 Thực hiện lệnh\nThực hiện các lệnh bình thường trên đối tượng redis Ví dụ:\nimport redis\nr = redis.StrictRedis(...)\nr.set('foo', 'bar')\nprint r.get('foo')\n(Hiển thị 'bar')\n10.4 Pipeline\nPipeline là kỹ thuật được dùng trong trường hợp bạn muốn\ntăng performance bởi gộp nhiều lệnh vào một request thay\nvì mỗi lệnh là một request như thông thường Xem ví dụ\nsau để hiểu cách sử dụng pipeline bằng redis-py :"
          },
          {
            "title": "10.4. Pipeline",
            "page": 73,
            "children": [],
            "content": "Nội dung phần '10.4. Pipeline':\n\nimport redis\nr = redis.StrictRedis(host='localhost', port=6379, \ndb=0)\n10.3 Thực hiện lệnh\nThực hiện các lệnh bình thường trên đối tượng redis Ví dụ:\nimport redis\nr = redis.StrictRedis(...)\nr.set('foo', 'bar')\nprint r.get('foo')\n(Hiển thị 'bar')\n10.4 Pipeline\nPipeline là kỹ thuật được dùng trong trường hợp bạn muốn\ntăng performance bởi gộp nhiều lệnh vào một request thay\nvì mỗi lệnh là một request như thông thường Xem ví dụ\nsau để hiểu cách sử dụng pipeline bằng redis-py :\nimport redis\nr = redis.StrictRedis(...)\nr.set('foo', 'bar')\npipe = r.pipeline()\npipe.set('a', 1)\npipe.set('b', 2)\npipe.set('c', 3)\npipe.get('foo')\npipe.execute()\nSau khi gọi phương thức execute()  thì sẽ trả về List tương\nứng với các kết quả của từng lệnh Ví dụ kết quả từ đoạn\ncode trên:\n[True, True, True, 'bar']"
          }
        ],
        "content": "Nội dung phần 'Chương 10. Kết nối Redis':\n\nNội dung phần '10.1 Cài đặt':\n\nChương 10 Kết nối Redis\nRedis là một memory cache server hỗ trợ persistant data\nthông dụng nhất hiện nay Nội dung chương này sẽ hướng\ndẫn bạn kết nối đến một Redis server (đã được cài đặt\nsẵn) thông qua thư viện redis-py 10.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttps://github.com/andymccurdy/redis-py\nĐơn giản cài thông qua pip  là:\n$ sudo pip install redis\n10.2 Kết nối đến Redis\nĐể kết nối đến Redis server thì bạn có thể xem ví dụ sau: Nội dung phần '10.2 Kết nối đến Redis':\n\nChương 10 Kết nối Redis\nRedis là một memory cache server hỗ trợ persistant data\nthông dụng nhất hiện nay Nội dung chương này sẽ hướng\ndẫn bạn kết nối đến một Redis server (đã được cài đặt\nsẵn) thông qua thư viện redis-py 10.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttps://github.com/andymccurdy/redis-py\nĐơn giản cài thông qua pip  là:\n$ sudo pip install redis\n10.2 Kết nối đến Redis\nĐể kết nối đến Redis server thì bạn có thể xem ví dụ sau: Nội dung phần '10.3 Thực hiện lệnh':\n\nimport redis\nr = redis.StrictRedis(host='localhost', port=6379, \ndb=0)\n10.3 Thực hiện lệnh\nThực hiện các lệnh bình thường trên đối tượng redis Ví dụ:\nimport redis\nr = redis.StrictRedis(...)\nr.set('foo', 'bar')\nprint r.get('foo')\n(Hiển thị 'bar')\n10.4 Pipeline\nPipeline là kỹ thuật được dùng trong trường hợp bạn muốn\ntăng performance bởi gộp nhiều lệnh vào một request thay\nvì mỗi lệnh là một request như thông thường Xem ví dụ\nsau để hiểu cách sử dụng pipeline bằng redis-py : Nội dung phần '10.4 Pipeline':\n\nimport redis\nr = redis.StrictRedis(host='localhost', port=6379, \ndb=0)\n10.3 Thực hiện lệnh\nThực hiện các lệnh bình thường trên đối tượng redis Ví dụ:\nimport redis\nr = redis.StrictRedis(...)\nr.set('foo', 'bar')\nprint r.get('foo')\n(Hiển thị 'bar')\n10.4 Pipeline\nPipeline là kỹ thuật được dùng trong trường hợp bạn muốn\ntăng performance bởi gộp nhiều lệnh vào một request thay\nvì mỗi lệnh là một request như thông thường Xem ví dụ\nsau để hiểu cách sử dụng pipeline bằng redis-py :\nimport redis\nr = redis.StrictRedis(...)\nr.set('foo', 'bar')\npipe = r.pipeline()\npipe.set('a', 1)\npipe.set('b', 2)\npipe.set('c', 3)\npipe.get('foo')\npipe.execute()\nSau khi gọi phương thức execute()  thì sẽ trả về List tương\nứng với các kết quả của từng lệnh Ví dụ kết quả từ đoạn\ncode trên:\n[True, True, True, 'bar']"
      },
      {
        "title": "Chương 11. Kết nối Memcached",
        "page": 75,
        "children": [
          {
            "title": "11.1. Cài đặt",
            "page": 75,
            "children": [],
            "content": "Nội dung phần '11.1. Cài đặt':\n\nChương 11 Kết nối\nMemcached\nMemcached là một memory cache server thông dụng hiện\nnay Nội dung chương này sẽ hướng dẫn bạn kết nối đến\nmột Memcached server (đã được cài đặt sẵn) thông qua\nthư viện pylibmc 11.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttp://sendapatch.se/projects/pylibmc/install.html\nĐơn giản cài thông qua pip  là:\n$ sudo pip install pylibmc\n11.2 Kết nối đến Memcached Server\nĐể kết nối đến Memcached server thì bạn có thể xem ví dụ\nsau:"
          },
          {
            "title": "11.2 Kết nối đến Memcached Server",
            "page": 75,
            "children": [],
            "content": "Nội dung phần '11.2 Kết nối đến Memcached Server':\n\nChương 11 Kết nối\nMemcached\nMemcached là một memory cache server thông dụng hiện\nnay Nội dung chương này sẽ hướng dẫn bạn kết nối đến\nmột Memcached server (đã được cài đặt sẵn) thông qua\nthư viện pylibmc 11.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttp://sendapatch.se/projects/pylibmc/install.html\nĐơn giản cài thông qua pip  là:\n$ sudo pip install pylibmc\n11.2 Kết nối đến Memcached Server\nĐể kết nối đến Memcached server thì bạn có thể xem ví dụ\nsau:"
          },
          {
            "title": "10.3. Thực hiện lệnh",
            "page": 76,
            "children": [],
            "content": "Nội dung phần '10.3. Thực hiện lệnh':\n\nimport pylibmc\nmc = pylibmc.Client([\"127.0.0.1\"], binary=True, beh\naviors={\"tcp_nodelay\": True, \"ketama\": True})\n10.3 Thực hiện lệnh\nThực hiện các lệnh bình thường trên đối tượng memcache Ví dụ:\nimport pylibmc\nmc = pylibmc.Client(...)\nmc.set('foo', 'bar')\nprint mc.get('foo')\n(Hiển thị 'bar')"
          }
        ],
        "content": "Nội dung phần 'Chương 11. Kết nối Memcached':\n\nNội dung phần '11.1 Cài đặt':\n\nChương 11 Kết nối\nMemcached\nMemcached là một memory cache server thông dụng hiện\nnay Nội dung chương này sẽ hướng dẫn bạn kết nối đến\nmột Memcached server (đã được cài đặt sẵn) thông qua\nthư viện pylibmc 11.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttp://sendapatch.se/projects/pylibmc/install.html\nĐơn giản cài thông qua pip  là:\n$ sudo pip install pylibmc\n11.2 Kết nối đến Memcached Server\nĐể kết nối đến Memcached server thì bạn có thể xem ví dụ\nsau: Nội dung phần '11.2 Kết nối đến Memcached Server':\n\nChương 11 Kết nối\nMemcached\nMemcached là một memory cache server thông dụng hiện\nnay Nội dung chương này sẽ hướng dẫn bạn kết nối đến\nmột Memcached server (đã được cài đặt sẵn) thông qua\nthư viện pylibmc 11.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttp://sendapatch.se/projects/pylibmc/install.html\nĐơn giản cài thông qua pip  là:\n$ sudo pip install pylibmc\n11.2 Kết nối đến Memcached Server\nĐể kết nối đến Memcached server thì bạn có thể xem ví dụ\nsau: Nội dung phần '10.3 Thực hiện lệnh':\n\nimport pylibmc\nmc = pylibmc.Client([\"127.0.0.1\"], binary=True, beh\naviors={\"tcp_nodelay\": True, \"ketama\": True})\n10.3 Thực hiện lệnh\nThực hiện các lệnh bình thường trên đối tượng memcache Ví dụ:\nimport pylibmc\nmc = pylibmc.Client(...)\nmc.set('foo', 'bar')\nprint mc.get('foo')\n(Hiển thị 'bar')"
      },
      {
        "title": "Chương 12. Kết nối RabbitMQ",
        "page": 77,
        "children": [
          {
            "title": "12.1. Cài đặt",
            "page": 77,
            "children": [],
            "content": "Nội dung phần '12.1. Cài đặt':\n\nChương 12 Kết nối RabbitMQ\nRabbitMQ là một phần mềm cho phép xây dựng Message\nQueue theo protocol AMQP và khá thông dụng trên thế\ngiới Để kết nối đến RabbitMQ trên Python, ta sẽ sử dụng\nthư viện pika 12.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttps://pika.readthedocs.org/en/0.10.0/\nĐơn giản cài thông qua pip  là:\n$ sudo pip install pika\n12.2 Gởi một message đến Server -\nProvider\nVí dụ để gởi một message đến server"
          },
          {
            "title": "12.2 Gởi một message đến Server - Provider",
            "page": 78,
            "children": [],
            "content": "Nội dung phần '12.2 Gởi một message đến Server - Provider':\n\nimport pika\nconnection = pika.BlockingConnection(pika.Connectio\nnParameters('localhost'))\nchannel = connection.channel()\nchannel.queue_declare(queue='hello')\n    \nchannel.basic_publish(exchange='', routing_key='hel\nlo', body='Hello World!')\nprint \" [x] Sent 'Hello World!'\"\n    \nconnection.close()\nĐể gởi một message, chúng ta cần kết nối đến server và\nkhai báo một channel, ở đây là channel có tên là hello Sau khi khai báo channel, tao tiến hành gởi message có\nnội dung Hello World thông qua channel này, kèm theo\nkhai báo routing_key  là hello Routing Key sẽ giúp điều\nhướng message này đến đúng các worker được khai báo\nnhận message theo routing key (Consumer)\n12.3 Nhận message - Consumer"
          },
          {
            "title": "12.3. Nhận message - Consumer",
            "page": 79,
            "children": [],
            "content": "Nội dung phần '12.3. Nhận message - Consumer':\n\nỞ bước trước, ta đã tạo một message lên queue Ở bước\nnày, ta sẽ khai báo một worker xử lý các message nhận\nđược từ channel hello import pika\nconnection = pika.BlockingConnection(pika.Connectio\nnParameters(host='localhost'))\nchannel = connection.channel()\n    \nchannel.queue_declare(queue='hello')\n    \nprint ' [*] Waiting for messages To exit press CTR\nL+C'\n    \ndef callback(ch, method, properties, body):\n    print \" [x] Received %r\" % (body,)\n    \nchannel.basic_consume(callback, queue='hello', no_a\nck=True)\n    \nchannel.start_consuming()\nĐoạn code này cũng có phần khai báo connection ,"
          },
          {
            "title": "12.4. Tìm hiểu thêm về RabbitMQ và Pika",
            "page": 80,
            "children": [],
            "content": "Nội dung phần '12.4. Tìm hiểu thêm về RabbitMQ và Pika':\n\nchannel Tuy nhiên, vì là consumer nên sẽ sử dụng\nphương thức basic_consume  để lắng nghe trên queue\nhello , khi có message đến sẽ gọi hàm callback()  để xử\nlý Trong trường hợp ví dụ này thì callback chỉ đơn giản là\nhiển thị chuỗi thông báo đã nhận được message 12.4 Tìm hiểu thêm về RabbitMQ và Pika\nNội dung chương này không có ý định giới thiệu tất cả khái\nniệm của AMQP cũng như RabbitMQ mà chủ yếu giới thiệu\nthư viện pika  để làm việc với RabbitMQ Bạn có thể tiếp\ntục theo dõi các hướng dẫn về khái niệm của RabbitMQ và\nPika tại website chính thức của RabbitMQ https://www.rabbitmq.com/tutorials/tutorial-one-\npython.html"
          }
        ],
        "content": "Nội dung phần 'Chương 12. Kết nối RabbitMQ':\n\nNội dung phần '12.1 Cài đặt':\n\nChương 12 Kết nối RabbitMQ\nRabbitMQ là một phần mềm cho phép xây dựng Message\nQueue theo protocol AMQP và khá thông dụng trên thế\ngiới Để kết nối đến RabbitMQ trên Python, ta sẽ sử dụng\nthư viện pika 12.1 Cài đặt\nCó thể xem thêm về hướng dẫn cài đặt thư viện này tại\nhttps://pika.readthedocs.org/en/0.10.0/\nĐơn giản cài thông qua pip  là:\n$ sudo pip install pika\n12.2 Gởi một message đến Server -\nProvider\nVí dụ để gởi một message đến server Nội dung phần '12.2 Gởi một message đến Server - Provider':\n\nimport pika\nconnection = pika.BlockingConnection(pika.Connectio\nnParameters('localhost'))\nchannel = connection.channel()\nchannel.queue_declare(queue='hello')\n    \nchannel.basic_publish(exchange='', routing_key='hel\nlo', body='Hello World!')\nprint \" [x] Sent 'Hello World!'\"\n    \nconnection.close()\nĐể gởi một message, chúng ta cần kết nối đến server và\nkhai báo một channel, ở đây là channel có tên là hello Sau khi khai báo channel, tao tiến hành gởi message có\nnội dung Hello World thông qua channel này, kèm theo\nkhai báo routing_key  là hello Routing Key sẽ giúp điều\nhướng message này đến đúng các worker được khai báo\nnhận message theo routing key (Consumer)\n12.3 Nhận message - Consumer Nội dung phần '12.3 Nhận message - Consumer':\n\nỞ bước trước, ta đã tạo một message lên queue Ở bước\nnày, ta sẽ khai báo một worker xử lý các message nhận\nđược từ channel hello import pika\nconnection = pika.BlockingConnection(pika.Connectio\nnParameters(host='localhost'))\nchannel = connection.channel()\n    \nchannel.queue_declare(queue='hello')\n    \nprint ' [*] Waiting for messages To exit press CTR\nL+C'\n    \ndef callback(ch, method, properties, body):\n    print \" [x] Received %r\" % (body,)\n    \nchannel.basic_consume(callback, queue='hello', no_a\nck=True)\n    \nchannel.start_consuming()\nĐoạn code này cũng có phần khai báo connection , Nội dung phần '12.4 Tìm hiểu thêm về RabbitMQ và Pika':\n\nchannel Tuy nhiên, vì là consumer nên sẽ sử dụng\nphương thức basic_consume  để lắng nghe trên queue\nhello , khi có message đến sẽ gọi hàm callback()  để xử\nlý Trong trường hợp ví dụ này thì callback chỉ đơn giản là\nhiển thị chuỗi thông báo đã nhận được message 12.4 Tìm hiểu thêm về RabbitMQ và Pika\nNội dung chương này không có ý định giới thiệu tất cả khái\nniệm của AMQP cũng như RabbitMQ mà chủ yếu giới thiệu\nthư viện pika  để làm việc với RabbitMQ Bạn có thể tiếp\ntục theo dõi các hướng dẫn về khái niệm của RabbitMQ và\nPika tại website chính thức của RabbitMQ https://www.rabbitmq.com/tutorials/tutorial-one-\npython.html"
      },
      {
        "title": "Chương 13. Restful client",
        "page": 81,
        "children": [
          {
            "title": "13.1. Cài đặt",
            "page": 81,
            "children": [],
            "content": "Nội dung phần '13.1. Cài đặt':\n\nChương 13 Restful client\nNgày nay, với sự phong phú của các ứng dụng và nhu cầu\nkết nối ngày càng lớn thì Restful là một trong những mô\nhình web service được nhiều công ty sử dụng Do đó, việc\ncó thể kết nối đến các Restful web service là một kỹ năng\ncần thiết cho các lập trình viên Chương này sẽ giới thiệu về một trong những thư viện nổi\ntiếng nhất trong Python để làm việc với các Restful web\nservice, đó là requests Website chính thức và các mô tả đầy đủ đều được đề cập\ntại http://www.python-requests.org/\n13.1 Cài đặt\nCài đặt nhanh chóng thông qua pip  như sau:\n$ sudo pip install requests"
          },
          {
            "title": "13.2. Request",
            "page": 82,
            "children": [
              {
                "title": "13.2.1. GET Query string",
                "page": 82,
                "children": [],
                "content": "Nội dung phần '13.2.1. GET Query string':\n\n13.2 Request\nHỗ trợ sẵn các phương thức tương ứng cho Http request\nnhư GET, POST, PUT, DELETE…\nimport requests\n    \nr = requests.get('https://api.github.com/events')\nr = requests.post(\"http://httpbin.org/post\")\nr = requests.put(\"http://httpbin.org/put\")\nr = requests.delete(\"http://httpbin.org/delete\")\nr = requests.head(\"http://httpbin.org/get\")\nr = requests.options(\"http://httpbin.org/get\")\n13.2.1 GET Query string\nĐối với các request GET , có thể truyền tham số đường dẫn\nthông qua tham số params  khi gọi phương thức get() Ví\ndụ:"
              },
              {
                "title": "13.2.2. Request Body",
                "page": 83,
                "children": [],
                "content": "Nội dung phần '13.2.2. Request Body':\n\nimport requests\n    \npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.get(\"http://httpbin.org/get\", params =\n payload)\nprint(r.url)\n(Hiển thị: http://httpbin.org/get?key2=value2&key1=\nvalue1)\n13.2.2 Request Body\nTrong hầu hết trường hợp các request như POST, PUT\nthương cần truyền dữ liệu khi request, có thể sử dụng tham\nsố data  để truyền data lên kèm request Ví dụ:\nimport requests\n    \npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.post(\"http://httpbin.org/post\", data =\n payload)\n13.2.3 Upload file"
              },
              {
                "title": "13.2.3. Upload file",
                "page": 84,
                "children": [],
                "content": "Nội dung phần '13.2.3. Upload file':\n\nCó thể gởi thêm tham số files  để upload file kèm theo\nrequest Ví dụ:\nimport requests\n    \nurl = 'http://httpbin.org/post'\nfiles = {'file': open('report.xls', 'rb')}\nr = requests.post(url, files=files)\n13.3 Response\nSau khi gọi các phương thức tương ứng để request, bạn sẽ\ncó đối tượng thuộc class Response Đối tượng này có một\nsố thông tin như sau:\nstatus_code : HTTP Status server trả về\nheaders : Các thông tin header mà server trả về dưới\ndạng Dictionary cookies : Nếu server có trả về cookie thì có thể sử\ndụng thuộc tính này để lấy các cookie text : Trả về nội dung response"
              }
            ],
            "content": "Nội dung phần '13.2. Request':\n\nNội dung phần '13.2.1 GET Query string':\n\n13.2 Request\nHỗ trợ sẵn các phương thức tương ứng cho Http request\nnhư GET, POST, PUT, DELETE…\nimport requests\n    \nr = requests.get('https://api.github.com/events')\nr = requests.post(\"http://httpbin.org/post\")\nr = requests.put(\"http://httpbin.org/put\")\nr = requests.delete(\"http://httpbin.org/delete\")\nr = requests.head(\"http://httpbin.org/get\")\nr = requests.options(\"http://httpbin.org/get\")\n13.2.1 GET Query string\nĐối với các request GET , có thể truyền tham số đường dẫn\nthông qua tham số params  khi gọi phương thức get() Ví\ndụ: Nội dung phần '13.2.2 Request Body':\n\nimport requests\n    \npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.get(\"http://httpbin.org/get\", params =\n payload)\nprint(r.url)\n(Hiển thị: http://httpbin.org/get?key2=value2&key1=\nvalue1)\n13.2.2 Request Body\nTrong hầu hết trường hợp các request như POST, PUT\nthương cần truyền dữ liệu khi request, có thể sử dụng tham\nsố data  để truyền data lên kèm request Ví dụ:\nimport requests\n    \npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.post(\"http://httpbin.org/post\", data =\n payload)\n13.2.3 Upload file Nội dung phần '13.2.3 Upload file':\n\nCó thể gởi thêm tham số files  để upload file kèm theo\nrequest Ví dụ:\nimport requests\n    \nurl = 'http://httpbin.org/post'\nfiles = {'file': open('report.xls', 'rb')}\nr = requests.post(url, files=files)\n13.3 Response\nSau khi gọi các phương thức tương ứng để request, bạn sẽ\ncó đối tượng thuộc class Response Đối tượng này có một\nsố thông tin như sau:\nstatus_code : HTTP Status server trả về\nheaders : Các thông tin header mà server trả về dưới\ndạng Dictionary cookies : Nếu server có trả về cookie thì có thể sử\ndụng thuộc tính này để lấy các cookie text : Trả về nội dung response"
          },
          {
            "title": "13.3. Response",
            "page": 84,
            "children": [],
            "content": "Nội dung phần '13.3. Response':\n\nCó thể gởi thêm tham số files  để upload file kèm theo\nrequest Ví dụ:\nimport requests\n    \nurl = 'http://httpbin.org/post'\nfiles = {'file': open('report.xls', 'rb')}\nr = requests.post(url, files=files)\n13.3 Response\nSau khi gọi các phương thức tương ứng để request, bạn sẽ\ncó đối tượng thuộc class Response Đối tượng này có một\nsố thông tin như sau:\nstatus_code : HTTP Status server trả về\nheaders : Các thông tin header mà server trả về dưới\ndạng Dictionary cookies : Nếu server có trả về cookie thì có thể sử\ndụng thuộc tính này để lấy các cookie text : Trả về nội dung response\nTham khảo về các tính năng khác của thư viện requests\ntại website chính thức http://docs.python-requests.org"
          }
        ],
        "content": "Nội dung phần 'Chương 13. Restful client':\n\nNội dung phần '13.1 Cài đặt':\n\nChương 13 Restful client\nNgày nay, với sự phong phú của các ứng dụng và nhu cầu\nkết nối ngày càng lớn thì Restful là một trong những mô\nhình web service được nhiều công ty sử dụng Do đó, việc\ncó thể kết nối đến các Restful web service là một kỹ năng\ncần thiết cho các lập trình viên Chương này sẽ giới thiệu về một trong những thư viện nổi\ntiếng nhất trong Python để làm việc với các Restful web\nservice, đó là requests Website chính thức và các mô tả đầy đủ đều được đề cập\ntại http://www.python-requests.org/\n13.1 Cài đặt\nCài đặt nhanh chóng thông qua pip  như sau:\n$ sudo pip install requests Nội dung phần '13.2 Request':\n\nNội dung phần '13.2.1 GET Query string':\n\n13.2 Request\nHỗ trợ sẵn các phương thức tương ứng cho Http request\nnhư GET, POST, PUT, DELETE…\nimport requests\n    \nr = requests.get('https://api.github.com/events')\nr = requests.post(\"http://httpbin.org/post\")\nr = requests.put(\"http://httpbin.org/put\")\nr = requests.delete(\"http://httpbin.org/delete\")\nr = requests.head(\"http://httpbin.org/get\")\nr = requests.options(\"http://httpbin.org/get\")\n13.2.1 GET Query string\nĐối với các request GET , có thể truyền tham số đường dẫn\nthông qua tham số params  khi gọi phương thức get() Ví\ndụ: Nội dung phần '13.2.2 Request Body':\n\nimport requests\n    \npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.get(\"http://httpbin.org/get\", params =\n payload)\nprint(r.url)\n(Hiển thị: http://httpbin.org/get?key2=value2&key1=\nvalue1)\n13.2.2 Request Body\nTrong hầu hết trường hợp các request như POST, PUT\nthương cần truyền dữ liệu khi request, có thể sử dụng tham\nsố data  để truyền data lên kèm request Ví dụ:\nimport requests\n    \npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.post(\"http://httpbin.org/post\", data =\n payload)\n13.2.3 Upload file Nội dung phần '13.2.3 Upload file':\n\nCó thể gởi thêm tham số files  để upload file kèm theo\nrequest Ví dụ:\nimport requests\n    \nurl = 'http://httpbin.org/post'\nfiles = {'file': open('report.xls', 'rb')}\nr = requests.post(url, files=files)\n13.3 Response\nSau khi gọi các phương thức tương ứng để request, bạn sẽ\ncó đối tượng thuộc class Response Đối tượng này có một\nsố thông tin như sau:\nstatus_code : HTTP Status server trả về\nheaders : Các thông tin header mà server trả về dưới\ndạng Dictionary cookies : Nếu server có trả về cookie thì có thể sử\ndụng thuộc tính này để lấy các cookie text : Trả về nội dung response Nội dung phần '13.3 Response':\n\nCó thể gởi thêm tham số files  để upload file kèm theo\nrequest Ví dụ:\nimport requests\n    \nurl = 'http://httpbin.org/post'\nfiles = {'file': open('report.xls', 'rb')}\nr = requests.post(url, files=files)\n13.3 Response\nSau khi gọi các phương thức tương ứng để request, bạn sẽ\ncó đối tượng thuộc class Response Đối tượng này có một\nsố thông tin như sau:\nstatus_code : HTTP Status server trả về\nheaders : Các thông tin header mà server trả về dưới\ndạng Dictionary cookies : Nếu server có trả về cookie thì có thể sử\ndụng thuộc tính này để lấy các cookie text : Trả về nội dung response\nTham khảo về các tính năng khác của thư viện requests\ntại website chính thức http://docs.python-requests.org"
      },
      {
        "title": "Chương 14. Gởi email với SMTP",
        "page": 86,
        "children": [
          {
            "title": "14.1. Cài đặt sender",
            "page": 86,
            "children": [],
            "content": "Nội dung phần '14.1. Cài đặt sender':\n\nChương 14 Gởi email với SMTP\nSMTP là giao thức gởi mail thông dụng hiện nay Python hỗ\ntrợ mặc định thư viện smtplib  dùng để kết nối đến một\nSMTP Server và gởi email Tuy nhiên, việc sử dụng thư\nviện này sẽ gây khó khăn cho việc định dạng và sử dụng\nnên chúng ta sẽ sử dụng thư viện sender , là một thư viện\ngiúp định dạng và gởi email đơn giản hơn 14.1 Cài đặt sender\nCài đặt từ pip  như sau:\n$ sudo pip install sender\n14.2 Gởi email đơn giản\nĐể gởi 1 email với sender , bạn cần có tài khoản và một số\nthông tin của SMTP Server trước khi gởi Ví dụ đoạn code\nđể gởi 1 email từ SMTP Server của Amazon"
          },
          {
            "title": "14.2. Gởi email đơn giản",
            "page": 86,
            "children": [],
            "content": "Nội dung phần '14.2. Gởi email đơn giản':\n\nChương 14 Gởi email với SMTP\nSMTP là giao thức gởi mail thông dụng hiện nay Python hỗ\ntrợ mặc định thư viện smtplib  dùng để kết nối đến một\nSMTP Server và gởi email Tuy nhiên, việc sử dụng thư\nviện này sẽ gây khó khăn cho việc định dạng và sử dụng\nnên chúng ta sẽ sử dụng thư viện sender , là một thư viện\ngiúp định dạng và gởi email đơn giản hơn 14.1 Cài đặt sender\nCài đặt từ pip  như sau:\n$ sudo pip install sender\n14.2 Gởi email đơn giản\nĐể gởi 1 email với sender , bạn cần có tài khoản và một số\nthông tin của SMTP Server trước khi gởi Ví dụ đoạn code\nđể gởi 1 email từ SMTP Server của Amazon from sender import Mail, Message\n    \nmail = Mail(\n    \"smtp.gmail.com\", \n    port = 465, \n    username = \"example@gmail.com\", \n    password = \"yourpassword\",\n    use_tls = False, \n    use_ssl = True, \n    debug_level = False\n)\n    \nmsg = Message(\"msg subject\")\nmsg.fromaddr = (\"Vo Duy Tuan\", \"example@gmail.com\")\nmsg.to = \"destuser@gmail.com\"\nmsg.body = \"this is a msg plain text body\"\nmsg.html = \"<b>this is a msg text body</b>\"\nmsg.reply_to = \"example@gmail.com\"\nmsg.charset = \"utf-8\"\nmsg.extra_headers = {}\nmsg.mail_options = []\nmsg.rcpt_options = []\n    \n# Send message\nmail.send(msg)"
          },
          {
            "title": "14.3. Gởi email có đính kèm file",
            "page": 88,
            "children": [],
            "content": "Nội dung phần '14.3. Gởi email có đính kèm file':\n\n14.3 Gởi email có đính kèm file\nBạn cần sử dụng thêm class Attachment để tạo\nattachment from sender import Mail, Message, Attachment\nmail = Main(...)\nmsg = Message(..)\n.. # Open attached file and create Attachment object\nwith open(\"photo01.jpg\") as f:\n    file01 = Attachment(\"photo01.jpg\", \"image/jpeg\"\n, f.read())\n    \nmsg.attach(file01)\n    \n# Send message\nmail.send(msg)\n14.4 Tìm hiểu thêm\nBạn có thể tìm hiểu thêm về thư viện sender  tại website"
          },
          {
            "title": "14.4. Tìm hiểu thêm",
            "page": 88,
            "children": [],
            "content": "Nội dung phần '14.4. Tìm hiểu thêm':\n\n14.3 Gởi email có đính kèm file\nBạn cần sử dụng thêm class Attachment để tạo\nattachment from sender import Mail, Message, Attachment\nmail = Main(...)\nmsg = Message(..)\n.. # Open attached file and create Attachment object\nwith open(\"photo01.jpg\") as f:\n    file01 = Attachment(\"photo01.jpg\", \"image/jpeg\"\n, f.read())\n    \nmsg.attach(file01)\n    \n# Send message\nmail.send(msg)\n14.4 Tìm hiểu thêm\nBạn có thể tìm hiểu thêm về thư viện sender  tại website\nchính thức tại địa chỉ http://sender.readthedocs.org/"
          }
        ],
        "content": "Nội dung phần 'Chương 14. Gởi email với SMTP':\n\nNội dung phần '14.1 Cài đặt sender':\n\nChương 14 Gởi email với SMTP\nSMTP là giao thức gởi mail thông dụng hiện nay Python hỗ\ntrợ mặc định thư viện smtplib  dùng để kết nối đến một\nSMTP Server và gởi email Tuy nhiên, việc sử dụng thư\nviện này sẽ gây khó khăn cho việc định dạng và sử dụng\nnên chúng ta sẽ sử dụng thư viện sender , là một thư viện\ngiúp định dạng và gởi email đơn giản hơn 14.1 Cài đặt sender\nCài đặt từ pip  như sau:\n$ sudo pip install sender\n14.2 Gởi email đơn giản\nĐể gởi 1 email với sender , bạn cần có tài khoản và một số\nthông tin của SMTP Server trước khi gởi Ví dụ đoạn code\nđể gởi 1 email từ SMTP Server của Amazon Nội dung phần '14.2 Gởi email đơn giản':\n\nChương 14 Gởi email với SMTP\nSMTP là giao thức gởi mail thông dụng hiện nay Python hỗ\ntrợ mặc định thư viện smtplib  dùng để kết nối đến một\nSMTP Server và gởi email Tuy nhiên, việc sử dụng thư\nviện này sẽ gây khó khăn cho việc định dạng và sử dụng\nnên chúng ta sẽ sử dụng thư viện sender , là một thư viện\ngiúp định dạng và gởi email đơn giản hơn 14.1 Cài đặt sender\nCài đặt từ pip  như sau:\n$ sudo pip install sender\n14.2 Gởi email đơn giản\nĐể gởi 1 email với sender , bạn cần có tài khoản và một số\nthông tin của SMTP Server trước khi gởi Ví dụ đoạn code\nđể gởi 1 email từ SMTP Server của Amazon from sender import Mail, Message\n    \nmail = Mail(\n    \"smtp.gmail.com\", \n    port = 465, \n    username = \"example@gmail.com\", \n    password = \"yourpassword\",\n    use_tls = False, \n    use_ssl = True, \n    debug_level = False\n)\n    \nmsg = Message(\"msg subject\")\nmsg.fromaddr = (\"Vo Duy Tuan\", \"example@gmail.com\")\nmsg.to = \"destuser@gmail.com\"\nmsg.body = \"this is a msg plain text body\"\nmsg.html = \"<b>this is a msg text body</b>\"\nmsg.reply_to = \"example@gmail.com\"\nmsg.charset = \"utf-8\"\nmsg.extra_headers = {}\nmsg.mail_options = []\nmsg.rcpt_options = []\n    \n# Send message\nmail.send(msg) Nội dung phần '14.3 Gởi email có đính kèm file':\n\n14.3 Gởi email có đính kèm file\nBạn cần sử dụng thêm class Attachment để tạo\nattachment from sender import Mail, Message, Attachment\nmail = Main(...)\nmsg = Message(..)\n. # Open attached file and create Attachment object\nwith open(\"photo01.jpg\") as f:\n    file01 = Attachment(\"photo01.jpg\", \"image/jpeg\"\n, f.read())\n    \nmsg.attach(file01)\n    \n# Send message\nmail.send(msg)\n14.4 Tìm hiểu thêm\nBạn có thể tìm hiểu thêm về thư viện sender  tại website Nội dung phần '14.4 Tìm hiểu thêm':\n\n14.3 Gởi email có đính kèm file\nBạn cần sử dụng thêm class Attachment để tạo\nattachment from sender import Mail, Message, Attachment\nmail = Main(...)\nmsg = Message(..)\n. # Open attached file and create Attachment object\nwith open(\"photo01.jpg\") as f:\n    file01 = Attachment(\"photo01.jpg\", \"image/jpeg\"\n, f.read())\n    \nmsg.attach(file01)\n    \n# Send message\nmail.send(msg)\n14.4 Tìm hiểu thêm\nBạn có thể tìm hiểu thêm về thư viện sender  tại website\nchính thức tại địa chỉ http://sender.readthedocs.org/"
      },
      {
        "title": "Chương 15. Socket programming",
        "page": 90,
        "children": [
          {
            "title": "15.1. Server side",
            "page": 90,
            "children": [],
            "content": "Nội dung phần '15.1. Server side':\n\nChương 15 Socket\nprogramming\nChương này sẽ ví dụ việc xây dựng một môi trường Client -\nServer sử dụng Socket Server sẽ lắng nghe trên một port\n(12345) và khi client kết nối vào sẽ thông báo hiển thị\nthông tin của client (IP và Port) và gởi 1 message xuống\ncho client 15.1 Server side\nTạo file server.py  với nội dung bên dưới import socket\n    \ns = socket.socket()\nhost = socket.gethostname()\nport = 12345\ns.bind((host, port))\n    \ns.listen(5)\nwhile True:\n   c, addr = s.accept()\n   print 'Got connection from', addr\n   c.send('Thank you for connecting')\n   c.close() \nĐoạn code trên khi thực thi sẽ chạy và lắng nghe ở port\nTCP 12345 Mỗi khi có một kết nối từ client sẽ hiện ra\nthông báo kết nối từ IP và Port nào, ví dụ: Got connection\nfrom Got connection from ('192.168.1.104', 60018) Sau đó, gởi trả một message với nội dung Thank you for\nconnecting  về cho client Sau đó, đóng kết nối với client 15.2 Client side"
          },
          {
            "title": "15.2. Client side",
            "page": 92,
            "children": [],
            "content": "Nội dung phần '15.2. Client side':\n\nTạo file client.py  với nội dung bên dưới import socket\n    \ns = socket.socket()\nhost = '127.0.0.1'\nport = 12345\n    \ns.connect((host, port))\nprint s.recv(1024)\ns.close\nĐoạn code trên sẽ kết nối đến một socket server thông\nqua hostname lấy được từ phương thức\nsocket.gethostname()  và port 12345 Sau khi kết nối, sẽ\nhiển thị ra kết quả trả về từ server Sau đó thì đóng kết nối"
          }
        ],
        "content": "Nội dung phần 'Chương 15. Socket programming':\n\nNội dung phần '15.1 Server side':\n\nChương 15 Socket\nprogramming\nChương này sẽ ví dụ việc xây dựng một môi trường Client -\nServer sử dụng Socket Server sẽ lắng nghe trên một port\n(12345) và khi client kết nối vào sẽ thông báo hiển thị\nthông tin của client (IP và Port) và gởi 1 message xuống\ncho client 15.1 Server side\nTạo file server.py  với nội dung bên dưới import socket\n    \ns = socket.socket()\nhost = socket.gethostname()\nport = 12345\ns.bind((host, port))\n    \ns.listen(5)\nwhile True:\n   c, addr = s.accept()\n   print 'Got connection from', addr\n   c.send('Thank you for connecting')\n   c.close() \nĐoạn code trên khi thực thi sẽ chạy và lắng nghe ở port\nTCP 12345 Mỗi khi có một kết nối từ client sẽ hiện ra\nthông báo kết nối từ IP và Port nào, ví dụ: Got connection\nfrom Got connection from ('192.168.1.104', 60018) Sau đó, gởi trả một message với nội dung Thank you for\nconnecting  về cho client Sau đó, đóng kết nối với client 15.2 Client side Nội dung phần '15.2 Client side':\n\nTạo file client.py  với nội dung bên dưới import socket\n    \ns = socket.socket()\nhost = '127.0.0.1'\nport = 12345\n    \ns.connect((host, port))\nprint s.recv(1024)\ns.close\nĐoạn code trên sẽ kết nối đến một socket server thông\nqua hostname lấy được từ phương thức\nsocket.gethostname()  và port 12345 Sau khi kết nối, sẽ\nhiển thị ra kết quả trả về từ server Sau đó thì đóng kết nối"
      }
    ]
  }
]
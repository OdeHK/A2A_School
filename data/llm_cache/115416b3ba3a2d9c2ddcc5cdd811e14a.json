{
  "response": "**Hàm trong PHP** là một khối mã có tên, được viết bằng từ khóa `function` (hoặc các kiểu hàm mới như hàm arrow / hàm ẩn danh) và thực hiện một nhiệm vụ cụ thể. Khi được gọi, hàm có thể:\n\n1. Nhận **đối số** (parameters) – dữ liệu đưa vào làm biến trong hàm.  \n2. Thực hiện các *công việc* như tính toán, xử lý chuỗi, mảng, file, …  \n3. Trả về **giá trị** (return value) – dữ liệu được gửi về nơi gọi hàm. Nếu không ghi `return`, hàm trả về `NULL`.\n\nVí dụ đơn giản:\n\n```php\nfunction add($a, $b) {          // Định nghĩa hàm có tên add\n    return $a + $b;             // Trả về tổng của hai tham số\n}\n\n$result = add(5, 3);            // Gọi hàm, truyền 5 và 3\necho $result;                   // In ra 8\n```\n\nTrong PHP, hàm có thể được chia thành nhiều loại:\n\n| Loại hàm | Mô tả | Ví dụ |\n|----------|-------|-------|\n| **Built‑in (đã có sẵn)** | Các hàm chuẩn được PHP cung cấp sẵn, như `strlen()`, `strpos()`, `array_push()`, `file_get_contents()`, … | `strlen('hello')` |\n| **User‑defined** | Bạn tự viết hàm theo nhu cầu của dự án. | Như ví dụ trên `add()` |\n| **Hàm ẩn danh (anonymous functions)** | Hàm không có tên, thường dùng làm callback. | `$func = function($x) { return $x * 2; };` |\n| **Hàm arrow (inline functions)** | Được giới thiệu từ PHP 7.4, ngắn gọn hơn hàm ẩn danh khi chỉ thực hiện một phép toán. | `$greet = fn($name) => \"Hello, $name!\";` |\n| **Callback Functions** | Hàm được truyền vào hàm khác để được gọi lại trong quá trình thực thi. | `array_map(function($x){return $x*2;}, $arr);` |\n\nVì vậy, **hàm trong PHP** là một công cụ mạnh mẽ giúp tổ chức, tái sử dụng mã, chia nhỏ logic thành các khối có thể gọi lại, cải thiện độ rõ ràng và bảo trì của chương trình."
}